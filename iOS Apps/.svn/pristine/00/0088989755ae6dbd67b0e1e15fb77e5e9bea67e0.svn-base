//
//  SharedUICode.m
//  ezClocker
//
//  Created by Kenneth Lewis on 1/11/16.
//  Copyright Â© 2016 ezNova Technologies LLC. All rights reserved.
//

#import "SharedUICode.h"
#import "NSString+Extensions.h"
#import "MetricsLogWebService.h"
#import "debugdefines.h"

@implementation SharedUICode

+ (void)checkResultsMessageAndDisplayError:(NSString *)resultMessage error:(NSError *)error {
    if ([NSString isNilOrEmpty:resultMessage]) {
        [SharedUICode messageBox:nil message:@"Time Entry from Server Failed"];
    } else {
        [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from ClockWebServices.m JSON Parsing Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];
        if (resultMessage.length > 0)
        {
            [SharedUICode messageBox:nil message:resultMessage];
        }
    }
}

+ (void)displayServiceUnavailableError {
    [SharedUICode displayServiceUnavailableErrorWithMsg:nil];
}

+ (void)displayServiceUnavailableErrorWithMsg:(NSString*)msg {
    [SharedUICode displayServiceUnavailableErrorWithMsg:msg withCompletion:nil];
}

+ (void)displayServiceUnavailableErrorWithMsg:(NSString*)msg withCompletion:(CompletionBlock)completion {
    NSString* testMsg = [NSString trim:msg];
    if ([NSString isNilOrEmpty:testMsg]) {
        testMsg = @"Please try again.";
    }
    [SharedUICode messageBox:nil message:[NSString stringWithFormat:@"ezClocker is unable to connect to the server at this time.\n\n%@", testMsg] withCompletion:completion];
}

+ (void)messageBox:(NSString*)title message:(NSString*)message {
    [SharedUICode messageBox:title message:message withCompletion:nil];
}

+ (void)messageBox:(NSString*)title message:(NSString*)message withCompletion:(CompletionBlock)completion {
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:title message:message preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* okAction = [UIAlertAction actionWithTitle:@"OK" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        if (nil != completion) {
            completion();
        }
    }];
    [alert addAction:okAction];
    UIViewController* root = [SharedUICode getRoot];
    [root presentViewController:alert animated:YES completion:^{
        
    }];
}

+ (void)yesNoCancel:(NSString*)title message:(NSString*)message yesBtnTitle:(NSString*)yesBtnTitle noBtnTitle:(NSString*)noBtnTitle cancelBtnTitle:(NSString*)cancelBtnTitle withCompletion:(YesNoCancelCompletionBlock)completion {
    DEBUG_MSG
    NSAssert(nil != completion, @"completion cannot be nil %@", msg);
    NSString* testMsg = [NSString trim:message];
    NSAssert(nil != testMsg, @"testMsg cannot be nil or empty %@", msg);
    NSString* testYesBtnTitle = [NSString trim:yesBtnTitle];
    NSAssert(nil != testYesBtnTitle, @"yesBtnTitle cannot be nil or empty %@", msg);
    NSString* testNoBtnTitle = [NSString trim:noBtnTitle];
    NSAssert(nil != testNoBtnTitle, @"noBtnTitle cannot be nil or empty %@", msg);
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:title message:testMsg preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction* yesBtn = [UIAlertAction actionWithTitle:testYesBtnTitle style:UIAlertActionStyleDestructive handler:^(UIAlertAction *action) {
        completion(resultYes);
        return;
    }];
    [alert addAction:yesBtn];
    UIAlertAction* noBtn = [UIAlertAction actionWithTitle:testNoBtnTitle style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {
        completion(resultNo);
        return;
    }];
    [alert addAction:noBtn];
    NSString* testCancelBtnTitle = [NSString trim:cancelBtnTitle];
    // cancel can be empty
    if (![NSString isNilOrEmpty:testCancelBtnTitle]) {
        UIAlertAction* cancelBtn = [UIAlertAction actionWithTitle:testCancelBtnTitle style:UIAlertActionStyleCancel handler:^(UIAlertAction *action) {
            completion(resultCancel);
            return;
        }];
        [alert addAction:cancelBtn];
    }
    UIViewController* root = [SharedUICode getRoot];
    [root presentViewController:alert animated:YES completion:^{
        
    }];
}

+ (void)yesNo:(NSString*)title message:(NSString*)message yesBtnTitle:(NSString*)yesBtnTitle noBtnTitle:(NSString*)noBtnTitle withCompletion:(YesNoCancelCompletionBlock)completion {
    [SharedUICode yesNoCancel:title message:message yesBtnTitle:yesBtnTitle noBtnTitle:noBtnTitle cancelBtnTitle:nil withCompletion:completion];
}

+ (void)displayServerIsBusy {
    [SharedUICode messageBox:@"Busy" message:@"Please wait for process to finish and try again."];
}

+ (UIViewController*)topViewController {
    return [SharedUICode topViewControllerWithRootViewController:[UIApplication sharedApplication].keyWindow.rootViewController];
}

+ (UIViewController*)topViewControllerWithRootViewController:(UIViewController*)rootViewController {
    if ([rootViewController isKindOfClass:[UITabBarController class]]) {
        UITabBarController* tabBarController = (UITabBarController*)rootViewController;
        return [SharedUICode topViewControllerWithRootViewController:tabBarController.selectedViewController];
    } else if ([rootViewController isKindOfClass:[UINavigationController class]]) {
        UINavigationController* navigationController = (UINavigationController*)rootViewController;
        return [SharedUICode topViewControllerWithRootViewController:navigationController.visibleViewController];
    } else if (rootViewController.presentedViewController) {
        UIViewController* presentedViewController = rootViewController.presentedViewController;
        return [SharedUICode topViewControllerWithRootViewController:presentedViewController];
    } else {
        while (rootViewController.presentedViewController) {
            rootViewController = rootViewController.presentedViewController;
        }
        return rootViewController;
    }
}

+ (UIViewController*)getRoot {
    UIViewController* _topViewController = [SharedUICode topViewController];
    if (nil != _topViewController) {
        return _topViewController;
    }
    UIApplication* application = [UIApplication sharedApplication];
    UIWindow* keyWindow = [application keyWindow];
    UIViewController* topController = keyWindow.rootViewController;
    while (topController.presentedViewController) {
        topController = topController.presentedViewController;
    }

    return topController;
}

@end

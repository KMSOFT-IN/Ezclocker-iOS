//
//  LoginPersonalViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 1/31/15.
//  Copyright (c) 2015 ezNova Technologies LLC. All rights reserved.
//

#import "LoginPersonalViewController.h"
#import "user.h"
#import "ECSlidingViewController.h"
#import "CommonLib.h"
#import "MixPanel.h"
#import "MetricsLogWebService.h"

@implementation LoginPersonalViewController

- (IBAction)doForgotPassword:(id)sender {
    UIAlertView *recoverPasswordAlert = [[UIAlertView alloc] initWithTitle:@"Forgot Password" message:@"Enter email" delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"OK", nil];
    [recoverPasswordAlert setAlertViewStyle:UIAlertViewStylePlainTextInput];
    recoverPasswordAlert.tag = 1234;
    UITextField *textField = [recoverPasswordAlert textFieldAtIndex:0];
    textField.keyboardType = UIKeyboardTypeEmailAddress;
    textField.text = _emailTextField.text;
    [textField setDelegate:self];
    [recoverPasswordAlert show];

}
-(void) hideKeyboard{
    [_emailTextField resignFirstResponder];
    [_passwordTextField resignFirstResponder];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    _emailTextField.delegate = self;
    _passwordTextField.delegate = self;
    [_emailTextField setReturnKeyType:UIReturnKeyDone];
    [_passwordTextField setReturnKeyType:UIReturnKeyGo];
    self.navigationItem.leftBarButtonItem = _menuBarItem;
    self.navigationItem.rightBarButtonItem = nil;
    _passwordTextField.tag = 123;
    
    
    [self registerForKeyboardNotifications];
    
}

- (void)viewDidUnload
{
    [self setEmailTextField:nil];
    [self setPasswordTextField:nil];
    spinner = nil;
    [self setLoginButton:nil];
    [super viewDidUnload];
}

- (void)viewWillAppear:(BOOL)animated
{
    
    [super viewWillAppear:animated];
    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 650)];
    _emailSentLabel.hidden = YES;
    [_forgotPasswordButton setTitleColor:UIColorFromRGB(EZCLOCKER_BLUE_COLOR) forState:UIControlStateNormal];
    [_loginButton setTitleColor:UIColorFromRGB(EZCLOCKER_BLUE_COLOR) forState:UIControlStateNormal];
    [_accountSetupButton setTitleColor:UIColorFromRGB(EZCLOCKER_BLUE_COLOR) forState:UIControlStateNormal];
    if (_hidAccountSetupButton)
        _accountSetupButton.hidden = YES;
    
    _scrollView.backgroundColor = UIColorFromRGB(DARK_ORANGE_COLOR);


    
}

// Call this method somewhere in your view controller setup code.
- (void)registerForKeyboardNotifications
{
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    
}

// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    
    UIEdgeInsets contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
    
    // If active text field is hidden by keyboard, scroll it so it's visible
    CGRect aRect = self.view.frame;
    aRect.size.height -= kbSize.height;
    if (!CGRectContainsPoint(aRect, _passwordTextField.frame.origin) ) {
        [self.scrollView scrollRectToVisible:_passwordTextField.frame animated:YES];
    }
    
}

// Called when the UIKeyboardWillHideNotification is sent
/*- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
    
}
 */

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    [_scrollView setContentOffset:CGPointMake(0,0) animated:YES];
    
}


- (IBAction)doLogin:(id)sender {
    [self hideKeyboard];
    if ([_emailTextField.text length] == 0) {
        UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter an E-mail" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        if ([_passwordTextField.text length] == 0) {
            UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a Password" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else{
            if ([CommonLib validateEmail:_emailTextField.text])
            {
                [self startSpinner ];
                [self callGetAccountWebService:_emailTextField.text Password: self.passwordTextField.text];
            }
            else{
                UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a valid email" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
        }
    }

}
//call getUserAccount to get the type if they are employer or employee and also to get the id
-(void) callGetAccountWebService: (NSString*) userName Password: (NSString *) userPassword{
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    
    httpPostString = [NSString stringWithFormat:@"%@account/getUserAccounts", SERVER_URL];
    
    request_body = [NSString
                    stringWithFormat:@"developerToken=%@&userName=%@&password=%@",
                    [DEV_TOKEN        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userName     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userPassword     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding                    ]];
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    [urlRequest setValue:@"application/json;charset=UTF-8" forHTTPHeaderField:@"Accept"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    getAccountConnection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (getAccountConnection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

-(void) callGetAuthTokensWebService: (NSString*) userName Password: (NSString *) userPassword UserID: (NSString *) userID UserType: (NSString *) userType{
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    
    if ([userType isEqualToString:@"employer"]){
        httpPostString = [NSString stringWithFormat:@"%@account/getEmployerAuthTokens/%@", SERVER_URL, userID];
    }
    else{
        httpPostString = [NSString stringWithFormat:@"%@account/getEmployeeAuthTokens/%@", SERVER_URL, userID];
    }
    request_body = [NSString
                    stringWithFormat:@"developerToken=%@&userName=%@&password=%@",
                    [DEV_TOKEN        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userName     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userPassword     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding                    ]];
    
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    [urlRequest setValue:@"application/json;charset=UTF-8" forHTTPHeaderField:@"Accept"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    getAuthConnection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (getAuthConnection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}
//call getUserAccount to get the type if they are employer or employee and also to get the id
-(void) callGetEmployerInfoWebService{
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    UserClass *user = [UserClass getInstance];
    
    httpPostString = [NSString stringWithFormat:@"%@/employer/get/%@", SERVER_URL, user.employerID];
    //    httpPostString = [NSString stringWithFormat:@"%@account/getAuthTokensForEmployee", SERVER_URL];
    
    request_body = [NSString
                    stringWithFormat:@"authToken=%@",
                    [user.authToken        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]];
    
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    [urlRequest setValue:@"application/json;charset=UTF-8" forHTTPHeaderField:@"Accept"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    getAccountConnection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (getAccountConnection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

//call Reset Password web service which will send the user an email to reset password
-(void) callResetPasswordWebService: (NSString*) email{
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    
    httpPostString = [NSString stringWithFormat:@"%@account/resetPassword", SERVER_URL];
    
    request_body = [NSString
                    stringWithFormat:@"developerToken=%@&emailAddress=%@",
                    [DEV_TOKEN        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [email     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]
                    ];
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    [urlRequest setValue:@"application/json;charset=UTF-8" forHTTPHeaderField:@"Accept"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        int statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [self stopSpinner];
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
    data = [[NSMutableData alloc] init];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [self stopSpinner];
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    
    UIAlertView *alert;
    NSError *error = nil;
    UserClass *user = [UserClass getInstance];
    //save the user email
    user.userEmail = _emailTextField.text;
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
    
    
    
    if (![resultMessage isEqualToString:@"Success"])
    {
        
        [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from LoginViewController JSON Parsing Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];
        
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Error Logging in. Please check your login information and try again" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    else {
        //figure out if we did the call to the getAccount or getAuthToken by checking the connection
        if (connection == getAccountConnection){
            //            if (connection == getAuthConnection){
            NSArray *accounts = [results valueForKey:@"employerAccounts"];
            //if empty array then to see if the user is an employee
            if ([accounts count] == 0)
            {
                accounts = [results valueForKey:@"employeeAccounts"];
            }
            
            if ([accounts count] == 0){
                self.loginButton.enabled = true;
                [self showLoginFailureError];
            }
            else {
                //pick the first one need to change later
                NSDictionary *curAccount = [accounts objectAtIndex:0];
                
                NSString *tmp   = [curAccount valueForKey:@"type"];
                user.userType = tmp;
                if ([tmp isEqualToString:@"employer"]) {
                    //this is bad because they are using a login that is employer with the personal app
                    alert = [[UIAlertView alloc] initWithTitle:nil message:@"This Login is an Employer Login. Please use our other app ezClocker for Business for Employer Logins" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];

                }
                else {
                    user.userID = [curAccount valueForKey:@"id"];
                    user.indivdualName = [curAccount valueForKey:@"name"];
                    user.userEmail = [curAccount valueForKey:@"username"];
                    user.hasAccount = @"YES";
                    
                    //call to get the AuthToken
                    [self callGetAuthTokensWebService:_emailTextField.text Password: self.passwordTextField.text UserID:[user.userID stringValue] UserType: user.userType];

                }
                
            }
        }
        //else the getAuthToken connection was called
        else if (connection == getAuthConnection){
            NSArray *authTokens = [results valueForKey:@"activeAuthTokens"];
            NSDictionary *curAuthToken = [authTokens objectAtIndex:0];
            NSString *tmp   = [curAuthToken valueForKey:@"authToken"];
            user.authToken  = tmp;
            user.employerID = [curAuthToken valueForKey:@"employerId"];

            if ([user.employerID integerValue] != PERSONAL_EMPLOYERID)
                alert = [[UIAlertView alloc] initWithTitle:nil message:@"WARNING! you are using the wrong app. You need to use the ezClocker for Business app so your employer can see your time sheet. Please install our other app" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];

            //save data
            
            [[NSUserDefaults standardUserDefaults] setInteger:[user.employerID intValue] forKey:@"employerId"];
            [[NSUserDefaults standardUserDefaults] setInteger:[user.userID intValue] forKey:@"employeeId"];
            [[NSUserDefaults standardUserDefaults] setObject:user.indivdualName forKey:@"UserName"];
            [[NSUserDefaults standardUserDefaults] setObject:user.userEmail forKey:@"userEmail"];
            [[NSUserDefaults standardUserDefaults] setObject:user.hasAccount forKey:@"HasAccount"];
            [[NSUserDefaults standardUserDefaults] setObject:tmp forKey:@"authToken"];
            [[NSUserDefaults standardUserDefaults] synchronize]; //write out the data
            
            
            //log to mixpanel if we are production
            if ([CommonLib isProduction])
            {
                Mixpanel *mixpanel = [Mixpanel sharedInstance];
                
                [mixpanel track:@"Personal Login" properties:@{ @"email": _emailTextField.text}];
            }
            [self.delegate loginPersonalViewControllerDidFinished:self];
            
            
            //tell the App Delegate to launch the main view controller
            //          AppDelegate *mainDelegate = (AppDelegate*)[[UIApplication sharedApplication]delegate];
            //         [mainDelegate loginDidPass];
        }
    }
    
}

-(void) showLoginFailureError{
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Email or password is incorrect!. Please try again." delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    [alert show];
}

-(void) startSpinner{
    if (!spinner)
    {
        spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    spinner.labelText = @"Authenticating";
    [self.view addSubview:spinner];
    [spinner show:YES];
}

-(void) stopSpinner{
    [spinner hide:YES];
}

-(void)removeKeyboard{
    [_emailTextField resignFirstResponder];
    [_passwordTextField resignFirstResponder];
}

- (BOOL)textFieldShouldReturn:(UITextField *)theTextField {
    if (theTextField.tag == 123)
        [self doLogin:self];
    [self removeKeyboard];
    return YES;
    
}

- (IBAction)doSignUp:(id)sender {
    [self.delegate createPersonalViewControllerWasSelected:self];
}
- (IBAction)revealMenu:(id)sender {
    [self.slidingViewController anchorTopViewTo:ECRight];
}

-(void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if (alertView.tag == 1234) {
        UITextField *emailTextField = [alertView textFieldAtIndex: 0];
        //check if the OK button (index 1) was selected
        if (buttonIndex == 1)
        {
            if ([emailTextField.text length] > 0)
            {
                if ([CommonLib validateEmail:emailTextField.text])
                {
                    [self callResetPasswordWebService:emailTextField.text];
                    UIAlertView *confirmationDialog = [[UIAlertView alloc] initWithTitle:@"Information" message:@"Instructions for accessing your account has been sent to the email you provided." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    
                    [confirmationDialog show];
                }
                else{
                    NSString *errorMessage= [NSString stringWithFormat:@"Email %@ is invalid. Please try again", emailTextField.text];
                    UIAlertView *confirmationDialog = [[UIAlertView alloc] initWithTitle:@"Error" message: errorMessage delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    
                    [confirmationDialog show];
                    
                }
            }
        }
    }

    
/*    if (alertView.tag == 1234) {
        UITextField *emailTextField = [alertView textFieldAtIndex: 0];
        //check if the OK button (index 1) was selected
        if (buttonIndex == 1)
        {
            if ([emailTextField.text length] > 0)
            {
                _emailSentLabel.hidden = NO;
                [self callResetPasswordWebService:emailTextField.text];
            }
        }
    }*/
}



@end

//
//  UpdateAccountViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 3/17/14.
//  Copyright (c) 2014 ezNova Technologies LLC. All rights reserved.
//

#import "UpdateAccountViewController.h"
#import "user.h"
#import "CommonLib.h"
#import "MetricsLogWebService.h"

@interface UpdateAccountViewController ()

@end

@implementation UpdateAccountViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
    [self registerForKeyboardNotifications];
}

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    UserClass *user = [UserClass getInstance];
    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 650)];

    _nameTextField.text = user.indivdualName;
    _emailTextField.text = user.userEmail;
}

- (void)viewDidUnload
{
     _spinner = nil;
    [super viewDidUnload];
}


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}
// Call this method somewhere in your view controller setup code.
- (void)registerForKeyboardNotifications
{
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    
}



// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    
    UIEdgeInsets contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
    
    // If active text field is hidden by keyboard, scroll it so it's visible
    CGRect aRect = self.view.frame;
    aRect.size.height -= kbSize.height;
    if (!CGRectContainsPoint(aRect, _passwordTextField.frame.origin) ) {
        [self.scrollView scrollRectToVisible:_passwordTextField.frame animated:YES];
    }
    
}

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
}


- (IBAction)updateAccount:(id)sender {
    [self.delegate UpdateAccountViewControllerDidFinish:self];

}
-(void) callUpdateIndivdualAccountWebService{
    
    UserClass *user = [UserClass getInstance];
    UIAlertView *alert;
    NSString *httpPostString;
    
    httpPostString = [NSString stringWithFormat:@"%@api/v1/account/individual", SERVER_URL];
    //    NSLog(@"httpPostString is %@", httpPostString);
    
    
    NSString *oldUserName = user.userEmail;
    NSString *oldPassword = user.individualGeneratedPassword;
    NSString *newUserName = _nameTextField.text;
    NSString *newUserEmail = _emailTextField.text;
    NSString *newUserPassword = _passwordTextField.text;
    NSString *source = @"iPhone";
    
    
    NSDictionary *jsonDict = [NSDictionary dictionaryWithObjectsAndKeys:
                              oldUserName, @"currentUserName",
                              oldPassword, @"currentPassword",
                              newUserName, @"individualName",
                              newUserEmail, @"newUserName",
                              newUserPassword, @"newPassword",
                              source, @"source",
                              nil];
    
    
    NSError *error = nil;
    
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                                       options:0
                                                         error:&error];
    NSString *JSONString;
    if (!jsonData) {
    } else {
        
        JSONString = [[NSString alloc] initWithBytes:[jsonData bytes] length:[jsonData length] encoding:NSUTF8StringEncoding];
    }
    //    NSLog(@"url is %@", httpPostString);
    
    //    NSLog(@"JSONString is %@", JSONString);
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    NSData *requestData = [JSONString dataUsingEncoding:NSUTF8StringEncoding];
    
    [urlRequest setHTTPMethod:@"PUT"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [urlRequest setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
    [urlRequest setHTTPBody: requestData];
    
    
    
    [urlRequest setValue:DEV_TOKEN forHTTPHeaderField:@"x-ezclocker-developertoken"];
    
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
}


-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        int statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [self stopSpinner];
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
    data = [[NSMutableData alloc] init];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}


-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [self stopSpinner];
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    
    NSError *error = nil;
    UserClass *user = [UserClass getInstance];
    NSString* newStr = [[NSString alloc] initWithData:data
                                             encoding:NSUTF8StringEncoding];
    
    NSLog(@"JSONStr is %@", newStr);
    
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
    int errorValue = [[results valueForKey:@"errorCode"] intValue];
    
    
    if (![resultMessage isEqualToString:@"Success"])
    {
        [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from  UpdateAccountViewController JSON Parsing: %@ resultMessage= %@", error.localizedDescription, resultMessage]];
        
        
         UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Error Updating Account. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        
    }
    else {
        user.userEmail = _emailTextField.text;
        user.indivdualName = _nameTextField.text;
        //save the new data
        [[NSUserDefaults standardUserDefaults] setObject:user.indivdualName forKey:@"UserName"];
        [[NSUserDefaults standardUserDefaults] setObject:user.userEmail forKey:@"userEmail"];
        
        [[NSUserDefaults standardUserDefaults] synchronize]; //write out the data
        
        
        [self.delegate UpdateAccountViewControllerDidFinish:self];
        
        
        
    }
    
}
- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}


-(void) startSpinner{
    if (!self.spinner)
    {
        self.spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    self.spinner.labelText = @"Updating Account..";
    [self.view addSubview:self.spinner];
    [self.spinner show:YES];
}

-(void) stopSpinner{
    [self.spinner hide:YES];
}

@end

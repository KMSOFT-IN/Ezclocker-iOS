//
//  AppDelegate.m
//  ezClocker
//
//  Created by Raya Khashab on 10/22/13.
//  Copyright (c) 2013 ezNova Technologies LLC. All rights reserved.
//

#import "AppDelegate.h"
#import "user.h"
#import "SubscriptionWebService.h"
#import "CommonLib.h"
#import "Mixpanel.h"
#import "LocationManager.h"
#import "PushNotificationManager.h"
#import "DataManager.h"
#import "Reachability.h"
#import "MetricsLogWebService.h"
#import <Fabric/Fabric.h>
#import <Crashlytics/Crashlytics.h>
#import "SharedUICode.h"
#import "ISpinner.h"
#import <GooglePlaces/GooglePlaces.h>

#ifndef PERSONAL_VERSION
#import "EZPurchaseManager.h"
#endif



@implementation AppDelegate

@synthesize subscriptionWebService;

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Override point for customization after application launch.
    //make all the navigation bars light blue from the header_background image
    UIImage *image = [UIImage imageNamed:@"header_background.jpg"];
    [[UINavigationBar appearance] setBackgroundImage:image forBarMetrics:UIBarMetricsDefault];
    //make all bar buttons clear with no borders
    [[UIBarButtonItem appearance] setBackgroundImage:[[UIImage alloc] init] forState:UIControlStateNormal barMetrics:UIBarMetricsDefault];
 //   self.window.tintColor = [UIColor whiteColor];

    
    NSShadow *shadow = [[NSShadow alloc] init];
    shadow.shadowColor = [UIColor colorWithRed:0.0 green:0.0 blue:0.0 alpha:0.8];
    shadow.shadowOffset = CGSizeMake(0.0, -1.0);
    //this is the one that sets the back button's to white
    [[UINavigationBar appearance] setTintColor:[UIColor whiteColor]];
    [[UINavigationBar appearance] setBarTintColor:[UIColor whiteColor]];
    
    // Navigation bar buttons appearance
    
    
    [[UINavigationBar appearance]setShadowImage:[[UIImage alloc] init]];
    
    //Mixpanel setup
    
    [Mixpanel sharedInstanceWithToken:MIXPANEL_TOKEN];
    
    //CrashLytics setup
    [Fabric with:@[[Crashlytics class]]];
    

#ifdef DEBUG
//    [[UIApplication sharedApplication] performSelector:@selector(setApplicationBadgeString:) withObject:@"d"];
#endif
    
#ifndef PERSONAL_VERSION
    //Google Places (used for locations) setup
    [GMSPlacesClient provideAPIKey:@"AIzaSyC1k7JYP-TUkpErVSFCzobaGvt57QfH1Co"];

    [EZPurchaseManager sharedInstance];
    
    [[LocationManager defaultLocationManager] setDelegate:self];
    [[LocationManager defaultLocationManager] startTracking];
    
    UIPageControl *pageControl = [UIPageControl appearance];
    
    pageControl.pageIndicatorTintColor = [UIColor lightGrayColor];
    pageControl.currentPageIndicatorTintColor = [UIColor orangeColor];
    pageControl.backgroundColor = [UIColor whiteColor];
    
    // Handle APN on Terminated state, app launched because of APN
    NSDictionary *userInfo = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];
    if (userInfo) {
        PushNotificationManager* manager = [PushNotificationManager sharedManager];
        [manager addPushNotification:userInfo];
    }
    NSUInteger types = UIUserNotificationTypeAlert | UIUserNotificationTypeBadge | UIUserNotificationTypeSound;
    UIUserNotificationSettings* notificationSettings = [UIUserNotificationSettings settingsForTypes:types categories:nil];
    
    UIApplication* app = [UIApplication sharedApplication];
    [app registerUserNotificationSettings:notificationSettings];
    [app registerForRemoteNotifications];


#endif


    [application setMinimumBackgroundFetchInterval:UIApplicationBackgroundFetchIntervalMinimum];
    
    return YES;
}
- (id<ISpinner>)startSpinnerWithMessage:(NSString*)message {
    UIViewController* controller = [SharedUICode getRoot];
    id<ISpinner> spinner = nil;
    if (controller && [controller conformsToProtocol:@protocol(ISpinner)]) {
        spinner = (id <ISpinner>)controller;
        [spinner startSpinnerWithMessage:@"Syncing, please wait..."];
    }
    return spinner;
}


- (void)application:(UIApplication *)application performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
    if (![DataManager isClosed]) {
        DataManager* manager = [DataManager sharedManager];
        __block id<ISpinner> spinner = [self startSpinnerWithMessage:@"Syncing, please wait..."];
        [manager forceSyncWithCompletion:^(UIBackgroundFetchResult result, NSInteger errorCode, NSError* error) {
            //NOTE: No need to do this here the data manager will call if new data
            /*if (result == UIBackgroundFetchResultNewData) {
             [DataManager postNotifyTimeSheetMasterRefresh:TRUE];
             }*/
            if (errorCode == SERVICE_ERRORCODE_SUCCESSFUL ||
                errorCode == SERVICE_ERRORCODE_SUCCESSFUL_NOTHING_TO_DO ||
                errorCode == DATAMANAGER_NO_PENDING_UPDATES ||
                errorCode == SERVICE_UNAVAILABLE_ERROR ||
                errorCode == DATAMANAGER_BUSY) {
                // no metrics
            } else if (nil != error) {
                NSString* msg = [NSString stringWithFormat:@"Error while Force Syncing in application:performFetchWithCompletion: - %@", error.localizedDescription];
                [MetricsLogWebService LogException: msg];
            } else {
                NSString* errorCodeMsg = [CommonLib errorMsg:errorCode];
                NSString* msg = [NSString stringWithFormat:@"errorCode %d (%@) was reported during forceSync in application:performFetchWithCompletion:", (int)errorCode, errorCodeMsg];
                [MetricsLogWebService LogException:msg];
            }
            if (spinner) {
                [spinner stopSpinner];
            }
            completionHandler(result);
            return;
        }];
        return;
    } else {
#ifndef RELEASE
        NSLog(@"DataManager is closed meaning you have signed out!");
#endif
    }
    completionHandler(UIBackgroundFetchResultNoData);
}

- (UIInterfaceOrientationMask)application:(UIApplication *)application supportedInterfaceOrientationsForWindow:(UIWindow *)window{
    return UIInterfaceOrientationMaskPortrait | UIInterfaceOrientationMaskPortraitUpsideDown;
}

- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url
{
//    if (!url) {  return NO; }
    
//    NSString *URLString = [url absoluteString];
//    [[NSUserDefaults standardUserDefaults] setObject:URLString forKey:@"url"];
//    [[NSUserDefaults standardUserDefaults] synchronize];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    if (![DataManager isClosed]) {
        DataManager* manager = [DataManager sharedManager];
        [manager stopTimer];
    }
    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
#ifndef PERSONAL_VERSION
    [[LocationManager defaultLocationManager] stopTracking];
#endif
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    if (![DataManager isClosed]) {
        DataManager* manager = [DataManager sharedManager];
        __block id<ISpinner> spinner = [self startSpinnerWithMessage:@"Syncing, please wait..."];
        [manager forceSyncWithCompletion:^(UIBackgroundFetchResult result, NSInteger errorCode, NSError* error) {
            //NOTE: No need to do this here the data manager will call if new data
            /*if (result == UIBackgroundFetchResultNewData) {
             DataManager postNotifyTimeSheetMasterRefresh:TRUE];
             }*/
            NSNotificationCenter* center = [NSNotificationCenter defaultCenter];
            if (errorCode == SERVICE_ERRORCODE_SUCCESSFUL ||
                errorCode == SERVICE_ERRORCODE_SUCCESSFUL_NOTHING_TO_DO ||
                errorCode == DATAMANAGER_NO_PENDING_UPDATES) {
                [center postNotificationName:kCheckClockStatusNotification object:nil];
            } else if (nil != error) {
                if (!(errorCode == SERVICE_UNAVAILABLE_ERROR || errorCode == DATAMANAGER_BUSY)) {
                    NSString* msg = [NSString stringWithFormat:@"Error while Force Syncing in applicationWillEnterForeground - %@", error.localizedDescription];
                    [MetricsLogWebService LogException: msg];
                }
            } else {
                NSString* errorCodeMsg = [CommonLib errorMsg:errorCode];
                NSString* msg = [NSString stringWithFormat:@"errorCode %d (%@) was reported during forceSync in applicationWillEnterForeground", (int)errorCode, errorCodeMsg];
                [MetricsLogWebService LogException:msg];
            }
            // notify the MenuViewController in case you have it open when it gets here so it can reload the menu to show how many pending updates
            [center postNotificationName:kForceSyncCompleteInAppWillEnterForegroundNotification object:nil];
            if (spinner) {
                [spinner stopSpinner];
            }
        }];
    } else {
#ifndef RELEASE
        NSLog(@"DataManager is closed meaning you have signed out!");
#endif
    }
    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
    //Raya turned this off because the apple validate call in the ezPurchaseManager should do this for me
    //   if (subscriptionWebService == nil)
    //       subscriptionWebService = [[SubscriptionWebService alloc] init];
#ifndef PERSONAL_VERSION
    [[LocationManager defaultLocationManager] startTracking];
    
#endif
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    [[UIApplication sharedApplication] setIdleTimerDisabled:YES];
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
    //Raya turned this off because the apple validate call in the ezPurchaseManager should do this for me

  //  UserClass *user = [UserClass getInstance];
  //  if ([user.userType isEqualToString:@"employer"]) {
  //     //check for subscription
  //      [subscriptionWebService callHasValidLicenseWebService];
  //  }
    
    UserClass *user = [UserClass getInstance];
    
    //rating dialog settings
    int didUserGiveFeedback = [[[NSUserDefaults standardUserDefaults] objectForKey:@"userGaveUsRatingFeedback"] intValue];
    
    user.userGaveUsRatingFeedback = [NSNumber numberWithInt:didUserGiveFeedback];
    
    int tmpValue = [[[NSUserDefaults standardUserDefaults] objectForKey:@"appLaunchCounter"] intValue];
    if (didUserGiveFeedback == 0)
    {
    
        tmpValue++;
        //go a head and save it back in after inc
        [[NSUserDefaults standardUserDefaults] setInteger:tmpValue forKey:@"appLaunchCounter"];
    }
    //this counter will tell us how many times we've launched the app and after a certain amount of times we'll prompt them
    user.appLaunchCounter = [NSNumber numberWithInt:tmpValue];

}

- (void)applicationWillTerminate:(UIApplication *)application
{
    [[UIApplication sharedApplication] setIdleTimerDisabled:NO];
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

#ifndef PERSONAL_VERSION

#pragma mark Location Services Lifecycle
-(void) locationError:(NSError *) error;
{
    bool bDisableDialog = [[NSUserDefaults standardUserDefaults] boolForKey:DISABLE_LOCATION_REMINDER_DIALOG_KEY];
    
    if ((error) && (error.code == kCLErrorDenied) && (!bDisableDialog)){
        //prompt user to renable location services
        UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Location Services" message:@"This app requires location services to be enabled. Pleases go to Settings App> Privacy > Location and switch ON location services for ezClocker." delegate:nil cancelButtonTitle:@"Do NOT Show Again" otherButtonTitles:@"OK", nil];
        alert.delegate = self;
        [alert show];
    }
}
#endif

#pragma mark Alert View Actions
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    bool bDisableDialog = (buttonIndex == 0); //set disable value
    //persist selection
    [[NSUserDefaults standardUserDefaults] setBool:bDisableDialog forKey:DISABLE_LOCATION_REMINDER_DIALOG_KEY];
    [[NSUserDefaults standardUserDefaults] synchronize];
}

-(void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification {
    UIApplicationState state = [application applicationState];
    if (state == UIApplicationStateActive) {
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@"Reminder"
                                                        message:notification.alertBody
                                                       delegate:self cancelButtonTitle:@"OK"
                                              otherButtonTitles:nil];
        [alert show];
    }

}

#ifndef PERSONAL_VERSION

- (void)application:(UIApplication*)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData*)deviceToken
{
NSString* newStr = [NSString stringWithUTF8String:[deviceToken bytes]];
#ifndef RELEASE
    NSLog(@"My token is: %@", deviceToken);
    NSLog(@"My token string is: %@", newStr);
#endif
    // Save the device token for now until we have logged in
    [PushNotificationManager saveDeviceToken:deviceToken];
//    PushNotificationManager* manager = [PushNotificationManager sharedManager];
//    [manager registerForPushNotification:^(BOOL successful, NSError *error) {

//    }];
  
}
#endif

- (void)application:(UIApplication*)application didFailToRegisterForRemoteNotificationsWithError:(NSError*)error
{
#ifndef RELEASE
    NSLog(@"Failed to get token, error: %@", error);
#endif
}

- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)
userInfo fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler {
    
/*    if (application.applicationState == UIApplicationStateActive)
    {
        // Nothing to do if applicationState is Inactive, the iOS already displayed an alert view.
        UIAlertView *alertView = [[UIAlertView alloc] initWithTitle:@"Did receive a Remote Notification" message:[NSString stringWithFormat:@"Your App name received this notification while it was running:\n%@",[[userInfo objectForKey:@"aps"] objectForKey:@"alert"]]delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        
        [alertView show];
    }
*/
    if (nil != userInfo) {
        PushNotificationManager* manager = [PushNotificationManager sharedManager];
        [manager addPushNotification:userInfo];
        completionHandler(UIBackgroundFetchResultNewData);
    } else {
        completionHandler(UIBackgroundFetchResultNoData);
    }
}

@end

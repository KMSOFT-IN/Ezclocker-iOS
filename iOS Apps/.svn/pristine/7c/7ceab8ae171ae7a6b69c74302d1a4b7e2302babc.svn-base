//
//  TimeSheetDetailViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 10/22/13.
//  Copyright (c) 2013 ezNova Technologies LLC. All rights reserved.
//

#import "TimeSheetDetailViewController.h"
#import "user.h"
#import <QuartzCore/QuartzCore.h>
#import "CommonLib.h"
#import "EZAnnotation.h"
#import "TimeEntryHistoryViewController.h"
#import "MapViewController.h"

@interface TimeSheetDetailViewController ()

@end

@implementation TimeSheetDetailViewController
@synthesize spinner = _spinner;
@synthesize clockInTextField = _clockInTextField;
@synthesize clockOutTextField = _clockOutTextField;
@synthesize timeEntryID;
@synthesize timeEntryNotes;
@synthesize reasonTextField;
@synthesize clockInDateTime;
@synthesize clockOutDateTime;
@synthesize clockInLocation, clockOutLocation;

@synthesize delegate = _delegate;
@synthesize _mapView, selectedMode, employeeName;

-(id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self){
        self.title = NSLocalizedString(@"Edit Time Entry", @"Edit Time Entry");
    }
    
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self){
        self.title = NSLocalizedString(@"Edit Time Entry", @"Edit Time Entry");
    }
    
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    //put a borde on the text field
    reasonTextField.text = @"";
    CALayer *imageLayer = reasonTextField.layer;
    [imageLayer setCornerRadius:10];
    [imageLayer setBorderWidth:2.1];
    imageLayer.borderColor=[[UIColor lightGrayColor] CGColor];
    
    _mapHistoryTable.layer.borderWidth = 0.5;
    
    UIBarButtonItem* saveButton = [[UIBarButtonItem alloc] initWithTitle:@"Save" style:UIBarButtonItemStylePlain target:self action:@selector(saveButtonAction)];
    
    self.navigationItem.rightBarButtonItem = saveButton;

    
    formatterDateTime12 = [[NSDateFormatter alloc] init];
    [formatterDateTime12 setDateFormat:@"MM/dd/yyyy h:mm:ss a"];
    formatterDateTime = [[NSDateFormatter alloc] init];
    [formatterDateTime setDateFormat:@"MM/dd/yyyy HH:mm:ss"];
    formatterISO8601DateTime = [[NSDateFormatter alloc] init];
    [formatterISO8601DateTime setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZ"];
    
    [self registerForKeyboardNotifications];
    
    TextFieldMode = 1;
    
    _clockInTextField.delegate = self;
    _clockOutTextField.delegate = self;

    CGRect screenBound = [[UIScreen mainScreen] bounds];
    CGSize screenSize = screenBound.size;
    CGFloat screenHeight = screenSize.height;

    pickerViewDate = [[UIView alloc] initWithFrame:CGRectMake(0, screenHeight-300, 320, 246)];
    [pickerViewDate setBackgroundColor:[UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1.0]];
    
    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0, 44, 0, 0)];
    theDatePicker.datePickerMode = UIDatePickerModeDateAndTime;
    theDatePicker.hidden = NO;
    NSDate *date = [NSDate date];
    theDatePicker.date = date;
    
#ifdef PERSONAL_VERSION
    _reasonLabel.text = @"Notes";
#endif
    // Do any additional setup after loading the view from its nib.
}

- (void)viewDidUnload
{
    [self setReasonTextField:nil];
    [self setClockInTextField:nil];
    [self setClockOutTextField:nil];
    pickerViewDate = nil;
    theDatePicker = nil;
    pickerToolbar = nil;
    
    [super viewDidUnload];
    _spinner = nil;
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

-(void) viewWillDisappear:(BOOL)animated{
    //remove all annotations
    [_mapView removeAnnotations:_mapView.annotations];
    
    [super viewWillDisappear:animated];
}
-(void) viewWillAppear:(BOOL)animated{
    UserClass *user = [UserClass getInstance];
    reasonTextField.text = timeEntryNotes;
    
    //add employee clock in annoation
    if (self.clockInLocation.latitude != 0 && self.clockInLocation.longitude != 0){
                EZAnnotation* ezAnn = [EZAnnotation addEmployeeAnnotation:_mapView
                                                                    Title:(self.employeeName)?self.employeeName:@"Clocked IN"
                                                                 SubTitle:(!self.employeeName)?@"":@"Clocked IN"
                             Coordinate:self.clockInLocation
                              ClockMode:ClockModeIn];
        if (selectedMode == ClockModeIn)
           [_mapView selectAnnotation:ezAnn animated:YES];
        
    }

    //add employee clock out annoation
    if (self.clockOutLocation.latitude != 0 && self.clockOutLocation.longitude != 0){
                EZAnnotation* ezAnn = [EZAnnotation addEmployeeAnnotation:_mapView
                                                                    Title:(self.employeeName)?self.employeeName:@"Clocked OUT"
                                                                 SubTitle:(!self.employeeName)?@"":@"Clocked OUT"
                             Coordinate:self.clockOutLocation
                              ClockMode:ClockModeOut];
    
        if (selectedMode == ClockModeOut) {
            [_mapView selectAnnotation:ezAnn animated:YES];
        }
    }

    if ([_mapView.annotations count] == 0) {
        //nothing to show, remove map
        _mapView.hidden = YES;
    } else {
        _mapView.hidden = NO;
        if (user.employerLocation.location.latitude != 0 && user.employerLocation.location.longitude != 0){
            [EZAnnotation addEmployerAnnotation:_mapView
                                      Title:user.employerLocation.name
                                   SubTitle:@"Work site"
                                 Coordinate:user.employerLocation.location];
        }
    }
    [self zoomMapViewToFitAnnotations:_mapView animated:YES];
    
    if ([clockInDateTime length] > 0)
    {
        _clockInTextField.text = clockInDateTime;
        _clockOutTextField.text = clockOutDateTime;
    }
    
    
 //   scrollViewCGSize = _scrollView.contentSize;

    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 650)];
    _scrollView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    _scrollView.delaysContentTouches = NO;

    
    [self removeKeyboard];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

// Call this method somewhere in your view controller setup code.
- (void)registerForKeyboardNotifications
{
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    
}

// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    
    UIEdgeInsets contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
    
    // If active text field is hidden by keyboard, scroll it so it's visible
    // Your app might not need or want this behavior.
    CGRect aRect = self.view.frame;
    aRect.size.height -= kbSize.height;
    if (!CGRectContainsPoint(aRect, reasonTextField.frame.origin) ) {
        [self.scrollView scrollRectToVisible:reasonTextField.frame animated:YES];
    }
}

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
}

-(BOOL)textFieldShouldBeginEditing:(UITextField *)textField
{
    // Here You can do additional code or task instead of writing with keyboard
    return NO;
}

-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        int statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [self stopSpinner];
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
    data = [[NSMutableData alloc] init];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    UIAlertView *alert;
    NSError *error = nil;
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
    if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"])){
        if ([resultMessage isEqual:[NSNull null]]){
            alert = [[UIAlertView alloc] initWithTitle:nil message:@"Time Entry from Server Failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        }
        else
            alert = [[UIAlertView alloc] initWithTitle:nil message:resultMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    else {
        [self.delegate saveTimeEntryDidFinish:self];

    }
    
   
}
- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}


-(void) callModifyTimeEntryWebService{
    
    //NSString *currentDateTime = self.getCurrentDateTime;
    UserClass *user = [UserClass getInstance];
    UIAlertView *alert;

    NSString *description = reasonTextField.text; //@"change time entry";
    NSString *httpPostString;
    //if mode=OUT means we are changing the clockout value
    NSString *clockInISO8601 = @"";
    NSString *clockOutISO8601 = @"";
    
    NSDate *ClockInDateValue = [formatterDateTime12 dateFromString:_clockInTextField.text];
    
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    clockInISO8601 = [formatterISO8601DateTime stringFromDate:ClockInDateValue];
    clockInISO8601  = [clockInISO8601 stringByReplacingOccurrencesOfString:@"+0000" withString:@"Z"];
    clockInISO8601  = [clockInISO8601 stringByReplacingOccurrencesOfString:@"-0000" withString:@"Z"];
    
    NSDate *ClockOutDateValue = [formatterDateTime12 dateFromString:_clockOutTextField.text];
    
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    clockOutISO8601 = [formatterISO8601DateTime stringFromDate:ClockOutDateValue];
    clockOutISO8601  = [clockOutISO8601 stringByReplacingOccurrencesOfString:@"+0000" withString:@"Z"];
    clockOutISO8601  = [clockOutISO8601 stringByReplacingOccurrencesOfString:@"-0000" withString:@"Z"];

//    if ([timeEntryMode isEqualToString:@"OUT"]) {
//        clockOutISO8601 = timeEntryStringISO8601;
//    }
//    else {
//        clockInISO8601 = timeEntryStringISO8601;
//    }
    

    
    NSTimeZone *timeZone = [NSTimeZone localTimeZone];
    NSString *timeZoneId = timeZone.name;

    NSString *request_body;

    httpPostString = [NSString stringWithFormat:@"%@timeEntry/modify/%@/%@", SERVER_URL, user.employerID, timeEntryID];


    //Implement request_body for send request here authToken and clock DateTime set into the body.
    request_body = [NSString 
                    stringWithFormat:@"authToken=%@&description=%@&clockInISO8601Utc=%@&clockOutISO8601Utc=%@&timeZoneId:=%@",
                    [user.authToken   stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [description  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [clockInISO8601  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [clockOutISO8601  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [timeZoneId  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]
                    ];
    
  //  alert = [[UIAlertView alloc] initWithTitle:nil message:request_body delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
   // [alert show];
 
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}
-(void) callDeleteTimeEntryWebService{
    
    //NSString *currentDateTime = self.getCurrentDateTime;
    UserClass *user = [UserClass getInstance];
    UIAlertView *alert;
    
   
    NSString *request_body;
    NSString *httpPostString;
   
    httpPostString = [NSString stringWithFormat:@"%@timeEntry/remove/%@/%@", SERVER_URL, user.employerID, timeEntryID];
    
    
    //Implement request_body for send request here authToken and clock DateTime set into the body.
    request_body = [NSString
                    stringWithFormat:@"authToken=%@",
                    [user.authToken   stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]
                    ];
    
    //  alert = [[UIAlertView alloc] initWithTitle:nil message:request_body delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    // [alert show];
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

-(void) startSpinner{
    if (!self.spinner)
    {
        self.spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    self.spinner.labelText = @"Saving";
    [self.view addSubview:self.spinner];
    [self.spinner show:YES];
}

-(void) stopSpinner{
    [self.spinner hide:YES];
}



-(void) saveButtonAction
{
    NSDate *clockPickerDate;
    clockPickerDate = [pickDate date];
    
//only force non personal accounts to enter a reason for the edit
#ifndef PERSONAL_VERSION
    if (reasonTextField.text.length == 0) {
        UIAlertView *alert;
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a reason for the change" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];

    }
    else {
        [self startSpinner ];
        [self callModifyTimeEntryWebService];
    }
#else
    [self startSpinner ];
    [self callModifyTimeEntryWebService];
#endif
    
}


-(void)dateSelected:(id)sender{
    if (TextFieldMode == 1)
        _clockInTextField.text = [formatterDateTime12 stringFromDate:[sender date]];
    else {
        _clockOutTextField.text = [formatterDateTime12 stringFromDate:[sender date]];
    }
 }


-(void)removeKeyboard{
 //   self.view.center = originalCenter;
    [reasonTextField resignFirstResponder];
}

- (IBAction)doClockInEditingBegin:(id)sender {
 //   self.view.center = CGPointMake(originalCenter.x, originalCenter.y - 100);

}

-(BOOL)closeDatePicker:(id)sender{
    [pickerViewDate removeFromSuperview];
    return YES;
}


-(IBAction)DatePickerDoneClick{
    UITextField *curTextField;
    if (TextFieldMode == 1)
        curTextField = _clockInTextField;
    else
        curTextField = _clockOutTextField;
    curTextField.text = [formatterDateTime12 stringFromDate:theDatePicker.date];

    [self closeDatePicker:self];
    
}

-(IBAction)DatePickerCancelClick{
    [self closeDatePicker:self];
}

-(void) showDatePicker{
    [self removeKeyboard];
    
    pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 64)];
    pickerToolbar.barStyle=UIBarStyleBlackOpaque;
    
    [pickerToolbar sizeToFit];
    
    UIBarButtonItem *cancelBtn = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerCancelClick)];
    
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];
    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];
    
    UIBarButtonItem *titleButton = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];
    if (TextFieldMode == 1)
        titleLabel.text = @"Clock In";
    else
        titleLabel.text = @"Clock Out";
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerDoneClick)];
    
    
    NSArray *itemArray = [[NSArray alloc] initWithObjects:cancelBtn, flexSpace, titleButton, flexSpace, doneDateBarBtn, nil];
    
    [pickerToolbar setItems:itemArray animated:YES];
    
    UITextField *curTextField;
    if (TextFieldMode == 1)
        curTextField = _clockInTextField;
    else
        curTextField = _clockOutTextField;
    if (![curTextField.text isEqualToString:@""])
        theDatePicker.date = [formatterDateTime12 dateFromString:curTextField.text];
    else
        curTextField.text = [formatterDateTime12 stringFromDate:theDatePicker.date];
    
    
    [pickerViewDate addSubview:pickerToolbar];
    [pickerViewDate addSubview:theDatePicker];
    
    [self.view addSubview:pickerViewDate];
    
/*    NSMutableArray *barItems = [[NSMutableArray alloc] init];
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(DatePickerDoneClick)];
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];

    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];

    UIBarButtonItem *title = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];


    if (TextFieldMode == 1)
        titleLabel.text = @"Clock In";
    else
        titleLabel.text = @"Clock Out";
    
    [barItems addObject:title];
    [barItems addObject:flexSpace];
    [barItems addObject:doneDateBarBtn];
    
    
    [pickerToolbar setItems:barItems animated:YES];
    [pickerViewDate addSubview:pickerToolbar];
    [pickerViewDate addSubview:theDatePicker];
    [pickerViewDate  showInView:self.view];
    [pickerViewDate setBounds:CGRectMake(0,0,320, 464)];
    
    UITextField *curTextField;
    if (TextFieldMode == 1)
        curTextField = _clockInTextField;
    else
        curTextField = _clockOutTextField;
    if (![curTextField.text isEqualToString:@""])
        theDatePicker.date = [formatterDateTime12 dateFromString:curTextField.text];
    else
        curTextField.text = [formatterDateTime12 stringFromDate:theDatePicker.date];
 */
    
}
 

- (IBAction)clockInTouchDown:(id)sender {
    TextFieldMode = 1;
    [self showDatePicker];

}
- (IBAction)clockOutTouchDown:(id)sender {
    TextFieldMode = 2;
    [self showDatePicker];
}
- (IBAction)doDeleteTimeEntry:(id)sender {
    [self confirmDelete];
}

-(void)confirmDelete{
    UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Confirm Delete" message:@"Tapping DELETE will remove this record from the system permanently." delegate:self cancelButtonTitle:@"Cancel" otherButtonTitles:@"DELETE", nil];
    [alert setTag:ALERT_DELETE_ACTION];
    [alert show];
}

-(void)doConfirmedDeleteTimeEntry{
    [self startSpinner ];
    [self callDeleteTimeEntryWebService];
}

#pragma mark MapView Helper Methods
#define MINIMUM_ZOOM 0.014
#define ANNOTATION_REGION_PAD_FACTOR 3.15
#define MAX_DEGREES 360
- (void)zoomMapViewToFitAnnotations:(MKMapView *)mapView animated:(BOOL)animated
{
    NSArray *annotations = mapView.annotations;
    int count = [mapView.annotations count];
    if (count == 0) return;  //early out
    
    MKMapPoint points[count];
    for(int i=0; i<count; i++){
        CLLocationCoordinate2D coordinate = [(id <MKAnnotation>)[annotations objectAtIndex:i] coordinate];
        points[i] = MKMapPointForCoordinate(coordinate);
    }

    MKMapRect mapRect = [[MKPolygon polygonWithPoints:points count:count] boundingMapRect];
    MKCoordinateRegion region = MKCoordinateRegionForMapRect(mapRect);
    region.span.latitudeDelta  *= ANNOTATION_REGION_PAD_FACTOR;
    region.span.longitudeDelta *= ANNOTATION_REGION_PAD_FACTOR;
    
    if (region.span.latitudeDelta  < MINIMUM_ZOOM) region.span.latitudeDelta  = MINIMUM_ZOOM;
    if (region.span.longitudeDelta < MINIMUM_ZOOM) region.span.longitudeDelta = MINIMUM_ZOOM;
    if (region.span.latitudeDelta > MAX_DEGREES)   region.span.latitudeDelta  = MAX_DEGREES;
    if (region.span.longitudeDelta > MAX_DEGREES)  region.span.longitudeDelta = MAX_DEGREES;
    
    if (count == 1){
        region.span.latitudeDelta = MINIMUM_ZOOM;
        region.span.longitudeDelta = MINIMUM_ZOOM;
    }
    
    [mapView setRegion:region animated:animated];
}

#pragma mark MapView Delegate Methods
-(void)setRegionWithinLocation:(CLLocation*)location{
    MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance (location.coordinate, 10000, 10000);
    [_mapView setRegion:region animated:YES];
}

- (MKAnnotationView *)mapView:(MKMapView *)mapView viewForAnnotation:(id < MKAnnotation >)annotation{
    if ([annotation isKindOfClass:[MKUserLocation class]])
        return nil;
    
    EZAnnotation* ezAnnotation = (EZAnnotation*)annotation;

    //dequeue pins
    MKAnnotationView *annView = (MKAnnotationView*) [mapView dequeueReusableAnnotationViewWithIdentifier:ezAnnotation.key];
    
    if (!annView){
        if (ezAnnotation.isEmployee){
            annView=[[MKAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:ezAnnotation.key];
            annView.image = ezAnnotation.image;
        } else
            annView=[[MKPinAnnotationView alloc] initWithAnnotation:annotation reuseIdentifier:ezAnnotation.key];

        //annView.rightCalloutAccessoryView = [UIButton buttonWithType:UIButtonTypeDetailDisclosure];
        annView.canShowCallout = YES;
        annView.calloutOffset = CGPointMake(-2, 2);
    }

    return annView;
}

#pragma mark AlertView Actions
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{
    switch (alertView.tag) {
        case ALERT_DELETE_ACTION:
        {
            if (buttonIndex == 1)
                [self doConfirmedDeleteTimeEntry];
        }break;
            
        default:
            break;
    }
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
    
}



- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    
    return 2;
    
    
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    }
    if (indexPath.row == 0)
        cell.textLabel.text = @"View Map";
    
    else
        cell.textLabel.text = @"View History";
    
    return cell;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    //if View map was selected
    if (indexPath.row == 0)
        [self showMapView];
    else
        [self showHistoryView];
}


-(void) showHistoryView{
    UIStoryboard *storyboard;
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        storyboard = [UIStoryboard storyboardWithName:@"iPhone" bundle:nil];
    } else if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        storyboard = [UIStoryboard storyboardWithName:@"iPad" bundle:nil];
    }
    
    TimeEntryHistoryViewController *historyViewController = [storyboard instantiateViewControllerWithIdentifier:@"TimeEntryHistory"];
    
    historyViewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    
    [self.navigationController pushViewController:historyViewController animated:YES];
}

-(void) showMapView{
    UIStoryboard *storyboard;
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        storyboard = [UIStoryboard storyboardWithName:@"iPhone" bundle:nil];
    } else if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        storyboard = [UIStoryboard storyboardWithName:@"iPad" bundle:nil];
    }
    
    MapViewController *mapViewController = [storyboard instantiateViewControllerWithIdentifier:@"MapView"];
    
    mapViewController.clockInLocation = self.clockInLocation;
    mapViewController.clockOutLocation = self.clockOutLocation;
    
    
    mapViewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    
    [self.navigationController pushViewController:mapViewController animated:YES];
    
}
@end

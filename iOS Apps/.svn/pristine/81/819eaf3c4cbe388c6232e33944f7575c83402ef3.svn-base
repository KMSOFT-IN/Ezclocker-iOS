//
//  TimeSheetMasterViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 10/22/13.
//  Copyright (c) 2013 ezNova Technologies LLC. All rights reserved.
//

#import "TimeSheetMasterViewController.h"
#import "AddTimeEntryViewController.h"
#import "TimeSheetDetailViewController.h"
#import <QuartzCore/QuartzCore.h>
#import "user.h"
#import "CommonLib.h"
#import "EmailTimeSheetViewController.h"
#import "ECSlidingViewController.h"
#import "MetricsLogWebService.h"
#import "EmailFeedbackViewController.h"



@interface TimeSheetMasterViewController ()

@end

@implementation TimeSheetMasterViewController
@synthesize TimeEntryTableView;
@synthesize timeSheetDetailViewController = _timeSheetDetailViewController;
@synthesize timeEntryItems;
@synthesize employeeID;
@synthesize employeeName;

UIButton *fromDateBtn, *toDateBtn;
//UIImagePickerController* imagePickerController;
UIDatePicker *theDatePicker;
UIToolbar* pickerToolbar;
UIView* pickerViewDate;
//set the color and gradient

NSString *startdate= @"";
NSString *enddate = @"";
NSString *selectedFromDateValue = @"";
NSString *selectedToDateValue = @"";
NSDateFormatter *dateFormatter;
DateRangeMode *curDateRangeActive;
bool fetchData = true;


//NSString *const ADD_TIME_ENTRY = @"Add Time Entry";
NSString *const EMAIL_TIME_SHEET = @"Email Time Sheet";


-(id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self){
        self.title = NSLocalizedString(@"Time Sheet", @"Time Sheet");
        self.tabBarItem.image = [UIImage imageNamed:@"clock"];
    }
    
    user = [UserClass getInstance];
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self){
        self.title = NSLocalizedString(@"Time Sheet", @"Time Sheet");
        self.tabBarItem.image = [UIImage imageNamed:@"folder"];
    }
    
    user = [UserClass getInstance];
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
 //   editFlag = NO;
    
    ratingDialogType = EnjoyingEzClokcer_dlg;
    

    timeEntryItems = [[NSMutableDictionary alloc] initWithCapacity:0];
    TimeEntryTableView.allowsSelectionDuringEditing = YES;
    self.edgesForExtendedLayout = UIRectEdgeAll;
    TimeEntryTableView.contentInset = UIEdgeInsetsMake(0., 0., CGRectGetHeight(self.tabBarController.tabBar.frame), 0);


    // Uncomment the following line to preserve selection between presentations.
    // self.clearsSelectionOnViewWillAppear = NO;
 
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
    
//    UIBarButtonItem* addButton = [[UIBarButtonItem alloc] initWithTitle:@"Edit" style:UIBarButtonSystemItemAdd target:self action:@selector(editButtonAction)];
    
    //ios 7
    self.navigationController.navigationBar.translucent = NO;

    dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setLocale: [[NSLocale alloc]
                               initWithLocaleIdentifier:@"en_US"]];
    [dateFormatter setDateFormat:@"MM/dd/yyyy"];
    
    dateFormatterEEEMMMdd = [[NSDateFormatter alloc] init];
    [dateFormatterEEEMMMdd setLocale: [[NSLocale alloc]
                               initWithLocaleIdentifier:@"en_US"]];
    [dateFormatterEEEMMMdd setDateFormat:@"EEEE MMM dd"];
    
    
    formatterISO8601DateTime = [[NSDateFormatter alloc] init];
    [formatterISO8601DateTime setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZ"];
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    formatterDateTime12 = [[NSDateFormatter alloc] init];
    [formatterDateTime12 setDateFormat:@"h:mm:ss a"];
    
    selectDateButton = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    selectDateButton.frame = CGRectMake(0, 0, 220.0f, 35.0f);
    selectDateButton.contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
  //  NSString *todayDateSr = [formatterDate stringFromDate:startingDate];
 //   [selectDateButton setTitle:todayDateSr forState:UIControlStateNormal];
    selectDateButton.titleLabel.font = [UIFont systemFontOfSize:20];
    [selectDateButton addTarget:self action:@selector(doChangeDate) forControlEvents:UIControlEventTouchUpInside];
    
    [_selectedDateView addSubview:selectDateButton];
    

    
}

- (void)viewDidUnload
{
    [self setTimeEntryTableView:nil];
    timeEntryItems = nil;
    [self setTotalHoursLabel:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}


- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear: animated];
    
    if ([user.payrollStartDate length] > 0)
        startdate = user.payrollStartDate;
    if ([user.payrollEndDate length] > 0)
        enddate = user.payrollEndDate;

    if ([user.userType isEqualToString:@"employer"])
        [self.parentViewController.navigationItem setTitle:employeeName];
    else
        [self.navigationItem setTitle:@"Time Sheet"];
    addButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAdd target:self action:@selector(addButtonAction)];
    
    actionButton = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAction target:self action:@selector(actionButtonAction)];
    
    
    if ([user.userType isEqualToString:@"employer"]){
        self.parentViewController.navigationItem.rightBarButtonItems = [NSArray arrayWithObjects:addButton, actionButton, nil];
    }
    else
        self.navigationItem.rightBarButtonItems = [NSArray arrayWithObjects:addButton, actionButton, nil];

    _TotalHoursLabel.text = @"0h 0m";

	
    [self callEmployeeTimeEntries];

    

    
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    // Return the number of sections.
    if ([user.timeHistory count] == 0){
        return 1;
    }
    else {
        return [user.timeHistory count];
    }  
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    return 34.f;
}

//because we are overridng the color of the section header we'll also need to set the Header text
//because by using this method it will override whatever is in titleForHeaderInSection method
-(UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section
{
    UIView *tempView=[[UIView alloc]initWithFrame:CGRectMake(0,200,300,244)];
    tempView.backgroundColor = UIColorFromRGB(BLUE_TOOLBAR_COLOR);
  //  UILabel *tempLabel = [[UILabel alloc] init];
    UILabel *tempLabel=[[UILabel alloc]initWithFrame:CGRectMake(15,0,300,36)];
    tempLabel.backgroundColor=[UIColor clearColor];
    tempLabel.textColor = [UIColor whiteColor];
    tempLabel.font = [UIFont fontWithName:@"Helvetica" size:16.0f];
    tempLabel.font = [UIFont boldSystemFontOfSize:16.0f];
    if ([user.timeHistory count] > 0)
    {
        NSDictionary *dayHistory;
        dayHistory = [user.timeHistory objectAtIndex:section];
        tempLabel.text =  (NSString*) [dayHistory valueForKey:@"date"];
    }
    else {
        tempLabel.text =  @"No timesheet entries available";
    }
    
    [tempView addSubview:tempLabel];

    return tempView;
}


- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    
    // Return the number of rows in the section.
    if ([user.timeHistory count] > 0)
    {
        // Return the number of rows in the section.
        NSDictionary *dayHistory;
        dayHistory = [user.timeHistory objectAtIndex:section];
        NSArray *timeEntriesHistory = [dayHistory valueForKey:@"timeEntries"];
        int tmp = [timeEntriesHistory count];
        return tmp;
    }
    else {
        return 0;
    }
    


}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    NSDictionary *item;
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    }
    if (user.timeHistory != nil){
        NSDictionary *dayHistory;
        dayHistory = [user.timeHistory objectAtIndex:(indexPath.section)];
        NSArray *timeEntriesPerDay = [dayHistory valueForKey:@"timeEntries"];
        item = [timeEntriesPerDay objectAtIndex:indexPath.row];

        if ([[item valueForKey:@"Mode"] isEqual:@"IN"]) {         
            cell.imageView.image = [UIImage imageNamed:@"clockin.png"];
        }
        else
            cell.imageView.image = [UIImage imageNamed:@"clockout.png"];
        cell.textLabel.text = [item valueForKey:@"TimeEntry"]; 
    }

    return cell;
}

/*
// Override to support conditional editing of the table view.
- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the specified item to be editable.
    return YES;
}
*/

/*
// Override to support editing the table view.
- (void)tableView:(UITableView *)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (editingStyle == UITableViewCellEditingStyleDelete) {
        // Delete the row from the data source
        [tableView deleteRowsAtIndexPaths:[NSArray arrayWithObject:indexPath] withRowAnimation:UITableViewRowAnimationFade];
    }   
    else if (editingStyle == UITableViewCellEditingStyleInsert) {
        // Create a new instance of the appropriate class, insert it into the array, and add a new row to the table view
    }   
}
*/

/*
// Override to support rearranging the table view.
- (void)tableView:(UITableView *)tableView moveRowAtIndexPath:(NSIndexPath *)fromIndexPath toIndexPath:(NSIndexPath *)toIndexPath
{
}
*/

/*
// Override to support conditional rearranging of the table view.
- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Return NO if you do not want the item to be re-orderable.
    return YES;
}
*/

#pragma mark - Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    // Navigation logic may go here. Create and push another view controller.
    if (!self.timeSheetDetailViewController){
     self.timeSheetDetailViewController = [[TimeSheetDetailViewController alloc] initWithNibName:@"TimeSheetDetailViewController" bundle:nil];
        self.timeSheetDetailViewController.delegate = (id) self;
    }
     // ...
     // Pass the selected object to the new view controller.
//    if (editFlag)
//    {
        
        NSDictionary *selectedTimeEntry, *selectedClockIn, *selectedClockOut;
        NSString *selectedTimeEntryID;
        NSString *selectedTimeEntryNotes;
        if (user.timeHistory != nil){
            NSDictionary *dayHistory;
            dayHistory = [user.timeHistory objectAtIndex:indexPath.section];
            NSArray *timeEntriesPerDay = [dayHistory valueForKey:@"timeEntries"];
            selectedTimeEntry = [timeEntriesPerDay objectAtIndex:indexPath.row];
            selectedTimeEntryID = [selectedTimeEntry valueForKey:@"ID"];
            selectedTimeEntryNotes = [selectedTimeEntry valueForKey:@"Notes"];
            self.timeSheetDetailViewController.clockInGpsDataStatus = [NSString stringWithFormat: @"%@",[selectedTimeEntry valueForKey:@"clockInGpsDataStatus"]];
            self.timeSheetDetailViewController.clockOutGpsDataStatus = [NSString stringWithFormat: @"%@",[selectedTimeEntry valueForKey:@"clockOutGpsDataStatus"]];

            //every line in the section represents either a clock in or out and we need to pass both
            //so figure out if the row selected is a clock in then check to see if the next one is a clock out
            if ([[selectedTimeEntry valueForKey:@"Mode"] isEqualToString:@"IN"]){
                self.timeSheetDetailViewController.selectedMode = ClockModeIn;
                selectedClockIn = selectedTimeEntry;
                if (([timeEntriesPerDay count ]- 1) >= indexPath.row + 1)
                {
                    selectedTimeEntry = [timeEntriesPerDay objectAtIndex:indexPath.row + 1];
                    if ([[selectedTimeEntry valueForKey:@"Mode"] isEqualToString:@"OUT"]){
                        selectedClockOut = selectedTimeEntry;
                    }
                }
            }
            //we selected a clock out, go up one row see if its the clock in value
            else{
                self.timeSheetDetailViewController.selectedMode = ClockModeOut;
                selectedClockOut = selectedTimeEntry;
                //make sure there is a row above the one selected so we can check it
                if (indexPath.row > 0)
                {
                    selectedTimeEntry = [timeEntriesPerDay objectAtIndex:indexPath.row - 1];
                    NSString *tmpSelectedTimeEntryID = [selectedTimeEntry valueForKey:@"ID"];
                    if ([tmpSelectedTimeEntryID intValue] == [selectedTimeEntryID intValue]){
                        selectedClockIn = selectedTimeEntry;
                    }
                }

            }
            
        }
        self.timeSheetDetailViewController.clockInDateTime = [selectedClockIn valueForKey:@"DateTimeEntry"];
        self.timeSheetDetailViewController.clockOutDateTime = [selectedClockOut valueForKey:@"DateTimeEntry"];
    
        self.timeSheetDetailViewController.clockInLocation = CLLocationCoordinate2DMake([[selectedClockIn valueForKey:@"Latitude"] doubleValue], [[selectedClockIn valueForKey:@"Longitude"] doubleValue]);
    
        self.timeSheetDetailViewController.clockOutLocation = CLLocationCoordinate2DMake([[selectedClockOut valueForKey:@"Latitude"] doubleValue], [[selectedClockOut valueForKey:@"Longitude"] doubleValue]);
    
    
    
        self.timeSheetDetailViewController.timeEntryID = selectedTimeEntryID;
        self.timeSheetDetailViewController.timeEntryNotes = selectedTimeEntryNotes;
        self.timeSheetDetailViewController.employeeName = employeeName;
        self.timeSheetDetailViewController.employeeId = employeeID;
        [self.navigationController pushViewController:self.timeSheetDetailViewController animated:YES];
     
}

-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    data = [[NSMutableData alloc] init];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    UIAlertView *alert;
 //   [self stopSpinner];
    NSString *clockinDate, *clockoutDate, *clockinDateEEEMMdd;
    NSError *error = nil;
    NSString *timeEntryID = @"";
    NSString *timeEntryNotes = @"";
    NSMutableArray *timeStampHistory;
    NSString* latitude;
    NSString* longitude;
    NSString* clockInLat;
    NSString* clockOutLat;
    NSString* clockInLon;
    NSString* clockOutLon;

    double ms;
    double totalms = 0;
    
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;

    NSArray *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    
    //sometimes we get a json object (usually when something goes wrong) and other times we get an array of time entries
    NSString* JSONStr = [[NSString alloc] initWithData:data
                                             encoding:NSUTF8StringEncoding];
    NSLog(@"JSONStr result is %@", JSONStr);

    if([JSONStr hasPrefix:@"{"]){

        NSString *resultMessage = [results valueForKey:@"message"];
        if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"]))
            [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from TimeSheetMasterViewController.m JSON Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];
    }
    else
    {
    
      user.timeHistory = [[NSMutableArray alloc] initWithCapacity:0];
    
      for (NSDictionary *dayEntries in results){
        ms = 0;
        //add a date
        NSDictionary *dayHistory = [[NSMutableDictionary alloc] initWithObjects:nil forKeys:nil];
        
        NSString *resultMessage = [dayEntries valueForKey:@"message"];

       //if message is null or <> Success then the call failed
       if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"])){
            [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from TimeSheetMasterViewController.m JSON Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];

            alert = [[UIAlertView alloc] initWithTitle:nil message:@"Server Failure" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
       }
       else {
        NSArray *timeEntriesArray = [dayEntries valueForKey:@"timeEntries"];
        
//        NSMutableArray *timeEntriesHistory = [[NSMutableArray alloc] init];
        clockinDate = @"";
           clockinDateEEEMMdd = @"";
        timeStampHistory = [[NSMutableArray alloc] initWithCapacity:0];
        
        for (NSDictionary *timeEntryRec in timeEntriesArray){

          //  clockinDate = [timeEntryRec valueForKey:@"clockInDate"];
            timeEntryID = [NSString stringWithFormat:@"%@", [timeEntryRec valueForKey:@"id"]];
            
            timeEntryNotes = [timeEntryRec valueForKey:@"notes"];
            if ([timeEntryNotes isEqual:[NSNull null]])
                timeEntryNotes = @"";

            NSString *clockInGpsDataStatus = [NSString stringWithFormat: @"%@",[timeEntryRec valueForKey:@"clockInGpsDataStatus"]];
            
            NSString *clockOutGpsDataStatus = [NSString stringWithFormat: @"%@",[timeEntryRec valueForKey:@"clockOutGpsDataStatus"]];
            
            
             NSString *clockInTime = [NSString stringWithFormat: @"%@",[timeEntryRec valueForKey:@"clockInIso8601"]];
            clockInTime  = [clockInTime stringByReplacingOccurrencesOfString:@"Z" withString:@"+0000"];
            
            NSDate *DateValue = [formatterISO8601DateTime dateFromString:clockInTime];
            clockInTime = [formatterDateTime12 stringFromDate:DateValue];
            
            clockinDate = [dateFormatter stringFromDate:DateValue];
            clockinDateEEEMMdd = [dateFormatterEEEMMMdd stringFromDate:DateValue];


          //  clockoutDate = [timeEntryRec valueForKey:@"clockOutDate"];
            NSString *clockOutTime = [NSString stringWithFormat:@"%@",[timeEntryRec valueForKey:@"clockOutIso8601"]];
            clockOutTime  = [clockOutTime stringByReplacingOccurrencesOfString:@"Z" withString:@"+0000"];
            DateValue = [formatterISO8601DateTime dateFromString:clockOutTime];
            clockOutTime = [formatterDateTime12 stringFromDate:DateValue];
            clockoutDate = [dateFormatter stringFromDate:DateValue];

            //get Location
            NSArray *locationsArray = [timeEntryRec valueForKey:@"locations"];
            //clear out values
            clockInLat = @"";
            clockInLon = @"";
            clockOutLat = @"";
            clockOutLon = @"";
            for (NSDictionary *loc in locationsArray) {
                
                latitude = [loc valueForKey:@"gpsLatitude"];
                longitude = [loc valueForKey:@"gpsLongitude"];
                
                if ([[loc valueForKey:@"clockInLocation"] boolValue]){
                    clockInLat = latitude;
                    clockInLon = longitude;
                } else {
                    clockOutLat = latitude;
                    clockOutLon = longitude;
                }
            }
            
            //if the clock out is equal to the clock in then there is no clock out
            if ([[timeEntryRec valueForKey:@"clockOutIso8601"] isEqualToString:[timeEntryRec valueForKey:@"clockInIso8601"]]) {
                clockOutTime = @"";
            }
          //  NSArray *array = [user.timeHistory objectForKey:clockinDate];
            NSMutableDictionary *item = [[NSMutableDictionary alloc] init];
            NSString *clockInDateTime = [[NSString alloc] initWithFormat:@"%@ %@", clockinDate, clockInTime];
            [item setValue:clockInTime forKey:@"TimeEntry"]; 
            [item setValue:timeEntryID forKey:@"ID"];
            [item setValue:timeEntryNotes forKey:@"Notes"];
            [item setValue:clockInGpsDataStatus forKey:@"clockInGpsDataStatus"];
            [item setValue:clockOutGpsDataStatus forKey:@"clockOutGpsDataStatus"];
            [item setValue:@"IN" forKey:@"Mode"];
            [item setValue:clockInLat forKey:@"Latitude"];
            [item setValue:clockInLon forKey:@"Longitude"];
            [item setValue:clockInDateTime forKey:@"DateTimeEntry"];
  //          [item setValue:[timeEntryRec valueForKey:@"clockInString"] forKey:@"DateTimeEntry"];
            
            [timeStampHistory addObject:item];
            if ([clockOutTime length] > 0)
            {
                item = [[NSMutableDictionary alloc] init];
                NSString *clockOutDateTime = [[NSString alloc] initWithFormat:@"%@ %@", clockoutDate, clockOutTime];
            
                [item setValue:clockOutTime forKey:@"TimeEntry"]; 
                [item setValue:timeEntryID forKey:@"ID"]; 
                [item setValue:timeEntryNotes forKey:@"Notes"];
                [item setValue:@"OUT" forKey:@"Mode"];
                [item setValue:clockOutDateTime forKey:@"DateTimeEntry"];
                [item setValue:clockOutLat forKey:@"Latitude"];
                [item setValue:clockOutLon forKey:@"Longitude"];

//                [item setValue:[timeEntryRec valueForKey:@"clockOutString"] forKey:@"DateTimeEntry"];

                [timeStampHistory addObject:item];
            }
            ms = ms + [[timeEntryRec valueForKey:@"totalMilliseconds"] doubleValue];
        }
           totalms = totalms + ms;

       }

        NSString *duration = [self formatInterval:ms];
        clockinDate = [NSString stringWithFormat:@"%@           %@",clockinDateEEEMMdd, duration];
        [dayHistory setValue:clockinDate forKey:@"date"];

        [dayHistory setValue:timeStampHistory forKey:@"timeEntries"];

        NSString *totalDuration = [self formatInterval:totalms];
        _TotalHoursLabel.text = totalDuration;

        [user.timeHistory insertObject:dayHistory atIndex:0];

      }
      [TimeEntryTableView reloadData];
    }
    
    
    //launch the review dialog
    int visitCounter = (int) [user.appLaunchCounter integerValue];
    int didUserGiveRatingFeedback = (int) [user.userGaveUsRatingFeedback integerValue];
    //only launch if the counter is a certain number and we haven't asked him before and it's been 21 since they installed the app so they've been using it for a while now
    NSDate *todaysDate = [NSDate date];
    NSInteger numOfDaysSinceInstall = [CommonLib daysBetweenDate:user.appInstallDate andDate:todaysDate];
    if ((visitCounter >= MAX_TIMES_APP_LAUNCHED) && (didUserGiveRatingFeedback == 0) && numOfDaysSinceInstall > 14)
    {
        //turn off the dialog so we don't show it anymore
        user.userGaveUsRatingFeedback = [NSNumber numberWithInt:1];
        [[NSUserDefaults standardUserDefaults] setInteger:[user.userGaveUsRatingFeedback intValue] forKey:@"userGaveUsRatingFeedback"];

        //show first rating dialog
        ratingDialogType = EnjoyingEzClokcer_dlg;
        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Enjoying ezClocker?" delegate:self cancelButtonTitle:@"Not really" otherButtonTitles:@"Yes!", nil];
        
        [alert show];
        
    }
    
}

-(void) callEmployeeTimeEntries{
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    //if employr view did not give us the employeeID then use user.userid which is the current user of the app
    if ([employeeID intValue] == 0) {
        employeeID = user.userID;
    }

    //only resume if we have an employeeID because if we don't then we are in trouble and don't need to show that to the user
    if ([employeeID intValue] != 0)
    {
        
        NSLog(@"emplID= %d", [employeeID intValue]);

        if ([startdate length] == 0)
        {
            NSTimeInterval secondsPerDay = 24 * 60 * 60;
            NSDate *today = [[NSDate alloc] init];
            NSDate *oneWeek;
    
            oneWeek = [today dateByAddingTimeInterval: -secondsPerDay * 7];
            startdate =[dateFormatter stringFromDate:oneWeek];
    
            enddate = [dateFormatter stringFromDate:today];
            
            user.payrollStartDate = startdate;
            user.payrollEndDate = enddate;
            //save dates
            [[NSUserDefaults standardUserDefaults] setObject:user.payrollStartDate forKey:@"payrollStartDate"];
            [[NSUserDefaults standardUserDefaults] setObject:user.payrollEndDate forKey:@"payrollEndDate"];
            [[NSUserDefaults standardUserDefaults] synchronize]; //write out the data

        }
        NSTimeZone *timeZone = [NSTimeZone localTimeZone];
        NSString *timeZoneId = timeZone.name;
        [selectDateButton setTitle:[NSString stringWithFormat:@"%@ - %@",startdate, enddate] forState:UIControlStateNormal];

        httpPostString = [NSString stringWithFormat:@"%@timeEntry/queryEmployee/%@", SERVER_URL, employeeID];
        //Implement request_body for send request here authToken and clock DateTime set into the body.
        request_body = [NSString
                    stringWithFormat:@"authToken=%@&startDate=%@&endDate=%@&timeZoneId=%@&employerId=%@",
                    [user.authToken   stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [startdate  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [enddate  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [timeZoneId  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [[user.employerID  stringValue] stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]
                    ];
    
    
        NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
        //set HTTP Method
        [urlRequest setHTTPMethod:@"POST"];
    
    
        //set request body into HTTPBody.
        [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
        //set request url to the NSURLConnection
        NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
        if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
        else {
            alert = [[UIAlertView alloc] initWithTitle:nil message:@"You’re already subscribed to a plan. Please unsubscribe in iTunes before switching plans" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        
        }
    }
    
}

- (NSString *) formatInterval: (NSTimeInterval) interval{
    unsigned long milliseconds = interval;
    unsigned long seconds = milliseconds / 1000;
    milliseconds %= 1000;
    unsigned long minutes = seconds / 60;
    seconds %= 60;
    unsigned long hours = minutes / 60;
    minutes %= 60;
    NSString *duration = [NSString stringWithFormat:@"%ldhrs %ldmins", hours, minutes];
    return duration;
}

- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex {
    if(ratingDialogType == EnjoyingEzClokcer_dlg)
    {
        if (buttonIndex != [alertView cancelButtonIndex]) {
            //show second rating dialog
            ratingDialogType = CanYouRateUs_dlg;
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"How about a rating on the App Store, then?" delegate:self cancelButtonTitle:@"No, thanks" otherButtonTitles:@"Ok, sure", nil];
            
            [alert show];
        }
        else{
            //show third rating dialog
            ratingDialogType = GiveUsFeedback_dlg;
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Would you mind giving us some feedback?" delegate:self cancelButtonTitle:@"No, thanks" otherButtonTitles:@"Ok, sure", nil];
            
            [alert show];
            
            
        }
    }
    else if(ratingDialogType == CanYouRateUs_dlg){
        if (buttonIndex != [alertView cancelButtonIndex]) {
            //send a notification to let us know that someone went to the app store to rate us
            [MetricsLogWebService LogException: [NSString stringWithFormat:@"Somebody Selected to Rate us on the App Store. Yay!!!!"]];
#ifdef PERSONAL_VERSION
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://itunes.apple.com/us/app/ezclocker-personal-time-tracking/id833047956?mt=8"]];
#else
            [[UIApplication sharedApplication] openURL:[NSURL URLWithString:@"https://itunes.apple.com/us/app/ezclocker/id800807197?ls=1&mt=8"]];
#endif
        }
    }
    else if (ratingDialogType == GiveUsFeedback_dlg)
    {
        if (buttonIndex != [alertView cancelButtonIndex]) {
            //take them to our feedback screen
            EmailFeedbackViewController *emailFeedbackController = [self.storyboard instantiateViewControllerWithIdentifier:@"EmailFeedback"];
            UINavigationController *emailFeedbackNavigationController = [[UINavigationController alloc] initWithRootViewController:emailFeedbackController];
            
            
            emailFeedbackController.delegate = (id) self;
            emailFeedbackController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
            
            [self presentViewController:emailFeedbackNavigationController animated:YES completion:nil];
            
        }
        else{
            [MetricsLogWebService LogException: [NSString stringWithFormat:@"Somebody Didn't want to give us feedback :-("]];

        }
        
    }
}


    
-(void) emailButtonAction
{
    

    EmailTimeSheetViewController *emaiViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"EmailTimeSheet"];
    
    timeSheetNavigationController = [[UINavigationController alloc] initWithRootViewController:emaiViewController];


    emaiViewController.startDate = startdate;
    emaiViewController.endDate = enddate;
    emaiViewController.employeeID = employeeID;
    emaiViewController.employeeEmail = _employeeEmail;

    
    emaiViewController.delegate = (id) self;
    emaiViewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
 
    
    [self presentViewController:timeSheetNavigationController animated:YES completion:nil];
    
}
-(void) addButtonAction
{
    AddTimeEntryViewController *addViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"AddtimeEntryViewController"];
    
    timeSheetNavigationController = [[UINavigationController alloc] initWithRootViewController:addViewController];


    
 //   AddTimeEntryViewController *controller = [[AddTimeEntryViewController alloc] initWithNibName:@"AddTimeEntryViewController" bundle:nil];
    
    addViewController.employeeID = employeeID;
    addViewController.delegate = (id) self;
    addViewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    
    [self presentViewController:timeSheetNavigationController animated:YES completion:nil];
    
}

-(void) actionButtonAction
{
    UIActionSheet *pickerViewAction = [[UIActionSheet alloc] initWithTitle:@"Time Sheet"
                                                 delegate:self
                                        cancelButtonTitle:@"Cancel"
                                   destructiveButtonTitle:nil
                                        otherButtonTitles:EMAIL_TIME_SHEET, nil];

    [pickerViewAction  showInView:[self.view window]];
//    [pickerViewAction setBounds:CGRectMake(0,0,320, 464)];

    
    
}

/*-(void) editButtonAction
{
    if (editFlag == YES){
        editFlag = NO;
        self.navigationItem.leftBarButtonItem.title = @"Edit";
        [TimeEntryTableView setEditing:NO animated: NO];   
    }
    else {
        editFlag = YES;
        self.navigationItem.leftBarButtonItem.title = @"Done";
        [TimeEntryTableView setEditing:YES animated: YES];   

    }
}
*/
- (void)addTimeEntryViewControllerDidFinish:(AddTimeEntryViewController *)controller
{
    
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)emailTimeSheetViewControllerDidFinish:(EmailTimeSheetViewController *)controller
{
    
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void)saveTimeEntryDidFinish:(TimeSheetDetailViewController *)controller
{
    [self.navigationController popViewControllerAnimated:YES];
}

- (void)emailFeedbackViewControllerDidFinish:(UIViewController *)controller
{
    [self dismissViewControllerAnimated:YES completion:nil];
}


- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from TimeSheetMasterViewController: %@", error.localizedDescription]];
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Error connecting to the server. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}

-(UIButton *) createDateRangeButton
{
    UIButton *currBtn = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, 70, 40)];
    
 //   [currBtn setTitle:@"From 09/08/13" forState:UIControlStateNormal];
    currBtn.titleLabel.font = [UIFont systemFontOfSize:12];
    [currBtn.titleLabel setTextAlignment:NSTextAlignmentCenter];
    currBtn.titleLabel. numberOfLines = 0; // Dynamic number of lines
    currBtn.titleLabel.lineBreakMode = NSLineBreakByWordWrapping;
    
    return currBtn;

}

//picking dates for reporting
-(void)DatePickerView
{
    CGRect screenBound = [[UIScreen mainScreen] bounds];
    CGSize screenSize = screenBound.size;
    CGFloat screenHeight = screenSize.height;
    
    pickerViewDate = [[UIView alloc] initWithFrame:CGRectMake(0, screenHeight-300, 320, 246)];
    [pickerViewDate setBackgroundColor:[UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1.0]];
    
    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0, 44, 0, 0)];
    theDatePicker.datePickerMode = UIDatePickerModeDate;
    theDatePicker.hidden = NO;
//    NSDate *date = [NSDate date];
//    theDatePicker.date = date;
   
 //   pickerViewDate = [[UIActionSheet alloc] initWithTitle:@""
 //                                                delegate:nil
 //                                       cancelButtonTitle:nil
 //                                  destructiveButtonTitle:nil
 //                                       otherButtonTitles:nil];
   
    
//    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0.0, 44.0, 0.0, 0.0)];
//    theDatePicker.datePickerMode = UIDatePickerModeDate;
 //   [UIView appearanceWhenContainedIn:[UITableView class], [UIDatePicker class], nil].backgroundColor = [UIColor colorWithWhite:1 alpha:1];

//    theDatePicker.backgroundColor = [UIColor whiteColor];
    

    [theDatePicker addTarget:self action:@selector(dateChanged) forControlEvents:UIControlEventValueChanged];

    fromDateBtn = [self createDateRangeButton];
    NSString *value = [[NSString alloc] initWithFormat:@"From %@", startdate];
    [fromDateBtn setTitle:value forState:UIControlStateNormal];
    selectedFromDateValue = startdate;
    
    //init the value of the date picker to the from date value
    NSDate *dateFromString = [[NSDate alloc] init];
    dateFromString = [dateFormatter dateFromString:startdate];
    
    [theDatePicker setDate:dateFromString];


 //   theDatePicker.date = startdate;
    
    fromDateBtn.backgroundColor = UIColorFromRGB(BLUE_TOOLBAR_COLOR);
    toDateBtn = [self createDateRangeButton];
    toDateBtn.backgroundColor = [UIColor grayColor];
    value = [[NSString alloc] initWithFormat:@"To %@", enddate];
    selectedToDateValue = enddate;
    
    [toDateBtn setTitle:value forState:UIControlStateNormal];
    
    [fromDateBtn addTarget:self
                    action:@selector(DatePickerFromDateClick)
          forControlEvents:UIControlEventTouchDown];
    [toDateBtn addTarget:self
                    action:@selector(DatePickerToDateClick)
          forControlEvents:UIControlEventTouchDown];
    
    
    pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, 320, 44)];
    pickerToolbar.barStyle=UIBarStyleBlackOpaque;
    [pickerToolbar sizeToFit];
    
    @try {
        
        NSMutableArray *barItems = [[NSMutableArray alloc] init];
        
        UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(DatePickerDoneClick)];
        
        UIBarButtonItem *fromDateBarBtn = [[UIBarButtonItem alloc] initWithCustomView:fromDateBtn];
        UIBarButtonItem *toDateBarBtn = [[UIBarButtonItem alloc] initWithCustomView:toDateBtn];
        UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];

        //this tells us if the From or To button is active
        curDateRangeActive = FromDateActive;
        
        [barItems addObject:fromDateBarBtn];
        [barItems addObject:toDateBarBtn];
        [barItems addObject:flexSpace];
        [barItems addObject:doneDateBarBtn];
        
        
        [pickerToolbar setItems:barItems animated:YES];
        [pickerViewDate addSubview:pickerToolbar];
        [pickerViewDate addSubview:theDatePicker];
 //       [pickerViewDate  showInView:self.view];
 //       [pickerViewDate setBounds:CGRectMake(0,0,320, 464)];

        [self.view addSubview:pickerViewDate];

        
    }
    @catch (id theException) {
        NSLog(@"%@ doesn't respond to appendString:!", [theException name]);
    }
}

-(IBAction)dateChanged{
    
    NSString *datePicked = [dateFormatter stringFromDate:[theDatePicker date]];
    if (curDateRangeActive == FromDateActive){
        fromDateBtn.titleLabel.text = [[NSString alloc] initWithFormat:@"From %@", datePicked];
        selectedFromDateValue = datePicked;
    }
    else{
        toDateBtn.titleLabel.text = [[NSString alloc] initWithFormat:@"To %@", datePicked];
        selectedToDateValue = datePicked;
    }
}


-(BOOL)closeDatePicker:(id)sender{
    [pickerViewDate removeFromSuperview];
    //   [SelectedTextField resignFirstResponder];
    
    
    return YES;
}

-(IBAction)DatePickerDoneClick{
    
    [self closeDatePicker:self];
    //initialize the date picker with the from date
//    NSDate *dateFromString = [[NSDate alloc] init];
//    NSString *dataValue = [fromDateBtn.titleLabel.text substringFromIndex:5];
//    dateFromString = [dateFormatter dateFromString:dataValue];
    
//    [theDatePicker setDate:dateFromString];

    NSString *tmpFromDate = fromDateBtn.titleLabel.text;
//    NSString *fromDateValue = [fromDateBtn.titleLabel.text substringFromIndex:5];
    NSString *fromDateValue = selectedFromDateValue;
//    NSString *toDateValue = [toDateBtn.titleLabel.text substringFromIndex:3];
    NSString *toDateValue = selectedToDateValue;
    //if the values of the date range are different from the one on the screen then fetch new time sheet with the new dates
    if (!([fromDateValue isEqualToString:startdate] && [toDateValue isEqualToString:enddate]))
    {
        startdate = fromDateValue;
        enddate = toDateValue;
        user.payrollStartDate = startdate;
        user.payrollEndDate = enddate;
        //save dates
        [[NSUserDefaults standardUserDefaults] setObject:user.payrollStartDate forKey:@"payrollStartDate"];
        [[NSUserDefaults standardUserDefaults] setObject:user.payrollEndDate forKey:@"payrollEndDate"];
        [[NSUserDefaults standardUserDefaults] synchronize]; //write out the data


        [self callEmployeeTimeEntries];
    }
    
}
-(IBAction)DatePickerFromDateClick{
    curDateRangeActive = FromDateActive;
    fromDateBtn.backgroundColor = UIColorFromRGB(BLUE_TOOLBAR_COLOR);
    toDateBtn.backgroundColor = [UIColor grayColor];

    NSDate *dateFromString = [[NSDate alloc] init];
    NSString *dataValue = [fromDateBtn.titleLabel.text substringFromIndex:5];
    dateFromString = [dateFormatter dateFromString:dataValue];

    [theDatePicker setDate:dateFromString];
    
}
-(IBAction)DatePickerToDateClick{
    curDateRangeActive = ToDateActive;
    toDateBtn.backgroundColor = UIColorFromRGB(BLUE_TOOLBAR_COLOR);
    fromDateBtn.backgroundColor = [UIColor grayColor];
    
    NSDate *dateFromString = [[NSDate alloc] init];
    NSString *dataValue = [toDateBtn.titleLabel.text substringFromIndex:3];
    dateFromString = [dateFormatter dateFromString:dataValue];
    
    [theDatePicker setDate:dateFromString];
    
}

- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView{
    return 1;
}

// returns the number of rows
- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component{
    return 30;
    //    return [pickerViewArray count];
}



- (IBAction)doSetDateRange:(id)sender {
    [self DatePickerView];
}

-(void) doChangeDate{
    [self DatePickerView];
}

- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex {
    //Get the name of the current pressed button
    NSString *buttonTitle = [actionSheet buttonTitleAtIndex:buttonIndex];
    if  ([buttonTitle isEqualToString:EMAIL_TIME_SHEET]) {
        [self emailButtonAction];
    }

}
- (IBAction)revealMenu:(id)sender {
    [self.slidingViewController anchorTopViewTo:ECRight];
    
}
@end

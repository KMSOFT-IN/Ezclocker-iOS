//
//  ScheduleDetailViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 1/19/15.
//  Copyright (c) 2015 ezNova Technologies LLC. All rights reserved.
//

#import "ScheduleDetailViewController.h"
#import "commonLib.h"
#import "Mixpanel.h"
#import "MetricsLogWebService.h"

#import "user.h"

@implementation ScheduleDetailViewController

- (IBAction)doScheduleSave:(id)sender {
    if (self.selectedSchedule == nil)
        [self callCreateSchedule];
    else
        [self callUpdateSchedule];
}

- (IBAction)doScheduleCancel:(id)sender {
    [self.delegate scheduleDetailViewControllerDidFinish:self];
}

- (IBAction)doStartTimeBtnClick:(id)sender {
    TextFieldMode = 1;
    theDatePicker.datePickerMode = UIDatePickerModeDateAndTime;
    [self showDatePicker];
}

- (IBAction)doEndTimeBtnClick:(id)sender {
    TextFieldMode = 2;
    theDatePicker.datePickerMode = UIDatePickerModeDateAndTime;
    [self showDatePicker];

}

- (IBAction)doEmployeeBtnClick:(id)sender {
    //if there is only one employee don't bother showing the picker
    if ([employeeList count] > 1) {
        [self showEmployeePicker];
    }

}

- (IBAction)doScheduleDelete:(id)sender {
    [self callDeleteSchedule];
}


-(void) viewWillAppear:(BOOL)animated{
    
    _mainView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    _DeleteTabelCell.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    _scrollView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 650)];
    _scrollView.delaysContentTouches = NO;
    
    //if there is data that was passed through selectedSchedule (e.g. master/detail view) then use it
    if (self.selectedSchedule != nil){
        [_employeeButton setTitle:[self.selectedSchedule valueForKey:@"employeeName"] forState:UIControlStateNormal];
        
        [_startTimeButton setTitle:[self.selectedSchedule valueForKey:@"startDateTime"] forState:UIControlStateNormal];
        
        [_endTimeButton setTitle:[self.selectedSchedule valueForKey:@"endDateTime"] forState:UIControlStateNormal];
        
    }
    else{
        [_startTimeButton setTitle:@"" forState:UIControlStateNormal];
        [_endTimeButton setTitle:@"" forState:UIControlStateNormal];

        if ([employeeList count] == 1)
            [_employeeButton setTitle:[employeeList objectAtIndex:0]forState:UIControlStateNormal];
        else
            [_employeeButton setTitle:@"" forState:UIControlStateNormal];
        
        //hide the delete button
        [_DeleteTabelCell setHidden:YES];
        
    }
    
}

-(void) viewDidLoad{
    TextFieldMode = 0;
    
    formatterISO8601DateTime = [[NSDateFormatter alloc] init];
    [formatterISO8601DateTime setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZ"];
    formatterDate = [[NSDateFormatter alloc] init];
    [formatterDate setDateFormat:@"MM/dd/yyyy"];
    
    formatterTime12 = [[NSDateFormatter alloc] init];
    [formatterTime12 setDateFormat:@"MM/dd/yyyy h:mm a"];
    
    CGRect screenBound = [[UIScreen mainScreen] bounds];
    CGSize screenSize = screenBound.size;
    CGFloat screenHeight = screenSize.height;
    
    pickerViewDate = [[UIView alloc] initWithFrame:CGRectMake(0, screenHeight-300, 320, 246)];
    [pickerViewDate setBackgroundColor:[UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1.0]];
    
    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0, 44, 0, 0)];
    theDatePicker.hidden = NO;
    NSDate *date = [NSDate date];
    theDatePicker.date = date;
    
    //ge the list of employees so we can show them in the employee view picker
    UserClass *user = [UserClass getInstance];
    employeeList = [[NSMutableArray alloc] initWithArray:[user.employeeNameIDList allValues]];
    
    //link the employee text field to the picker view that will show all employee names
    CGRect pickerFrame = CGRectMake(0, 40, 0, 0);
    
    pickerViewEmployeeName = [[UIPickerView alloc] initWithFrame:pickerFrame];
    pickerViewEmployeeName.dataSource = self;
    pickerViewEmployeeName.delegate = self;
    
    
    
}

- (void)viewDidUnload
{
    spinner = nil;
    theDatePicker = nil;
    pickerToolbar = nil;
    pickerViewDate = nil;
    
    [super viewDidUnload];
}

-(BOOL)closeDatePicker:(id)sender{
    [theDatePicker removeFromSuperview];
    [pickerViewDate removeFromSuperview];
    return YES;
}

-(BOOL)closeEmployeePicker:(id)sender{
    [pickerViewEmployeeName removeFromSuperview];
    [pickerViewDate removeFromSuperview];
    return YES;
}

-(IBAction)DatePickerDoneClick{
    UIButton *curButton;
    if (TextFieldMode == 1)
        curButton = _startTimeButton;
    else
        curButton = _endTimeButton;
    [curButton setTitle:[formatterTime12 stringFromDate:theDatePicker.date] forState:UIControlStateNormal];
    
    [self closeDatePicker:self];
}

-(IBAction)DatePickerCancelClick{
    [self closeDatePicker:self];
}

-(IBAction)EmployeePickerDoneClick{
    NSInteger row = [pickerViewEmployeeName selectedRowInComponent:0];
    
    [_employeeButton setTitle:[employeeList objectAtIndex:row] forState:UIControlStateNormal];

    
    [self closeEmployeePicker:self];
}

-(IBAction)EmployeePickerCancelClick{
    [self closeEmployeePicker:self];
}

-(void) showDatePicker{
    
    pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 64)];
    pickerToolbar.barStyle=UIBarStyleBlackOpaque;
    
    [pickerToolbar sizeToFit];
    
    UIBarButtonItem *cancelBtn = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerCancelClick)];
    
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];
    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];
    
    UIBarButtonItem *titleButton = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];
    //    if (TextFieldMode == 1)
    //        titleLabel.text = @"Clock In";
    //    else
    //        titleLabel.text = @"Clock Out";
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerDoneClick)];
    
    
    NSArray *itemArray = [[NSArray alloc] initWithObjects:cancelBtn, flexSpace, titleButton, flexSpace, doneDateBarBtn, nil];
    
    [pickerToolbar setItems:itemArray animated:YES];
    
    UIButton *curButton;
    if (TextFieldMode == 1)
        curButton = _startTimeButton;
    else
        curButton = _endTimeButton;
    
    BOOL isEmpty = !(curButton.titleLabel.text && curButton.titleLabel.text.length > 0);

    if (!isEmpty)
            theDatePicker.date = [formatterTime12 dateFromString:curButton.titleLabel.text];
    else
            [curButton setTitle:[formatterTime12 stringFromDate:theDatePicker.date] forState:UIControlStateNormal];

    
    [pickerViewDate addSubview:pickerToolbar];
    [pickerViewDate addSubview:theDatePicker];
    
    [self.view addSubview:pickerViewDate];
    
    
}
-(void) showEmployeePicker{
    
    pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 64)];
    pickerToolbar.barStyle=UIBarStyleBlackOpaque;
    
    [pickerToolbar sizeToFit];
    
    UIBarButtonItem *cancelBtn = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(EmployeePickerCancelClick)];
    
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];
    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];
    
    UIBarButtonItem *titleButton = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(EmployeePickerDoneClick)];
    
    
    NSArray *itemArray = [[NSArray alloc] initWithObjects:cancelBtn, flexSpace, titleButton, flexSpace, doneDateBarBtn, nil];
    
    [pickerToolbar setItems:itemArray animated:YES];
    int row = 0;
    int pos = 0;
    for (NSString *name in employeeList)
    {
        if ([name isEqualToString:_employeeButton.titleLabel.text])
            pos = row;
        else
            row++;
    }
    [pickerViewEmployeeName selectRow:pos inComponent:0 animated:YES];
    
    [pickerViewDate addSubview:pickerToolbar];
    [pickerViewDate addSubview:pickerViewEmployeeName];
    
    [self.view addSubview:pickerViewDate];
    
    
}


- (IBAction)doEmployeeNameTouchDown:(id)sender {
    //if there is only one employee don't bother showing the picker
    if ([employeeList count] > 1) {
        [self showEmployeePicker];
    }
    
}

-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        NSInteger statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [self stopSpinner];
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
    data = [[NSMutableData alloc] init];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    
    NSError *error = nil;
    
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
    UIAlertView *alert;
    
    if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"])){
        [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from ScheduleDetailViewController JSON Parsing Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];
        
        if ([resultMessage isEqual:[NSNull null]]){
            alert = [[UIAlertView alloc] initWithTitle:nil message:@"Schedule Creation Failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        }
        else
            alert = [[UIAlertView alloc] initWithTitle:nil message:resultMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    else {
        //log to mixpanel if we are production
        if ([CommonLib isProduction])
        {
            Mixpanel *mixpanel = [Mixpanel sharedInstance];
            UserClass *user = [UserClass getInstance];
            [mixpanel track:@"Create Schedule" properties:@{ @"email": user.userEmail}];
        }
        
        [self.delegate scheduleDetailViewControllerDidFinish:self];
    }
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}

-(void) callCreateSchedule{
    //    showErrorMessage = true;
    
    [self startSpinner];
    spinner.labelText = @"Creating Schedule..";
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *startTime, *endTime;
    UserClass *user = [UserClass getInstance];
    
    NSDate *DateValue = [formatterTime12 dateFromString:_startTimeButton.titleLabel.text];
    NSString *shiftDate = [formatterDate stringFromDate:DateValue];
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    startTime = [formatterISO8601DateTime stringFromDate:DateValue];
    startTime  = [startTime stringByReplacingOccurrencesOfString:@"+0000" withString:@".000Z"];
    startTime  = [startTime stringByReplacingOccurrencesOfString:@"-0000" withString:@".000Z"];
    
    DateValue = [formatterTime12 dateFromString:_endTimeButton.titleLabel.text];
    endTime = [formatterISO8601DateTime stringFromDate:DateValue];
    endTime  = [endTime stringByReplacingOccurrencesOfString:@"+0000" withString:@".000Z"];
    endTime  = [endTime stringByReplacingOccurrencesOfString:@"-0000" withString:@".000Z"];
    
    //    user.authToken = @"f57fd8bf-3b12-4012-b580-9ab0be6e8303";
    NSString *employerID = [user.employerID stringValue];
    NSArray* arrayOfKeys = [user.employeeNameIDList allKeysForObject:_employeeButton.titleLabel.text];
    
    
    NSString *employeeID = [arrayOfKeys objectAtIndex:0];
    httpPostString = [NSString stringWithFormat:@"%@schedules", SERVER_URL];
    
    NSString *tmpAuthToken = user.authToken;
    //    tmpAuthToken = @"cfb75f27-abbe-4c98-8319-d410f661d3f5";
    
    NSDictionary *jsonDict = [NSDictionary dictionaryWithObjectsAndKeys:
                              shiftDate, @"shiftDateString",
                              startTime, @"startDateTimeIso8601",
                              endTime, @"endDateTimeIso8601",
                              employerID, @"employerId",
                              employeeID, @"employeeId",
                              @"-1", @"locationId",
                              nil];
    
    
    NSError *error = nil;
    
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                                       options:0
                                                         error:&error];
    NSString *JSONString;
    if (!jsonData) {
    } else {
        
        JSONString = [[NSString alloc] initWithBytes:[jsonData bytes] length:[jsonData length] encoding:NSUTF8StringEncoding];
    }
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    NSData *requestData = [JSONString dataUsingEncoding:NSUTF8StringEncoding];
    
    
    
    [urlRequest setHTTPMethod:@"POST"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [urlRequest setValue:tmpAuthToken forHTTPHeaderField:@"authToken"];
    [urlRequest setValue:employerID forHTTPHeaderField:@"employerId"];
    [urlRequest setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
    [urlRequest setHTTPBody: requestData];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}
-(void) callUpdateSchedule{
    [self startSpinner];
    spinner.labelText = @"Updating Schedule..";
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *startTime, *endTime;
    UserClass *user = [UserClass getInstance];
    
    NSDate *DateValue = [formatterTime12 dateFromString:_startTimeButton.titleLabel.text];
    NSString *shiftDate = [formatterDate stringFromDate:DateValue];
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    startTime = [formatterISO8601DateTime stringFromDate:DateValue];
    startTime  = [startTime stringByReplacingOccurrencesOfString:@"+0000" withString:@".000Z"];
    startTime  = [startTime stringByReplacingOccurrencesOfString:@"-0000" withString:@".000Z"];
    
    DateValue = [formatterTime12 dateFromString:_endTimeButton.titleLabel.text];
    endTime = [formatterISO8601DateTime stringFromDate:DateValue];
    endTime  = [endTime stringByReplacingOccurrencesOfString:@"+0000" withString:@".000Z"];
    endTime  = [endTime stringByReplacingOccurrencesOfString:@"-0000" withString:@".000Z"];
    
    //    user.authToken = @"f57fd8bf-3b12-4012-b580-9ab0be6e8303";
    NSString *employerID = [user.employerID stringValue];
    NSArray* arrayOfKeys = [user.employeeNameIDList allKeysForObject:_employeeButton.titleLabel.text];
    
    
    NSString *employeeID = [arrayOfKeys objectAtIndex:0];
    httpPostString = [NSString stringWithFormat:@"%@schedules/%@", SERVER_URL, [self.selectedSchedule valueForKey:@"id"]];
    
    NSString *tmpAuthToken = user.authToken;
    //    tmpAuthToken = @"cfb75f27-abbe-4c98-8319-d410f661d3f5";
    
    NSDictionary *jsonDict = [NSDictionary dictionaryWithObjectsAndKeys:
                              shiftDate, @"shiftDateString",
                              startTime, @"startDateTimeIso8601",
                              endTime, @"endDateTimeIso8601",
                              employerID, @"employerId",
                              employeeID, @"employeeId",
                              @"-1", @"locationId",
                              nil];
    
    
    NSError *error = nil;
    
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:jsonDict
                                                       options:0
                                                         error:&error];
    NSString *JSONString;
    if (!jsonData) {
    } else {
        
        JSONString = [[NSString alloc] initWithBytes:[jsonData bytes] length:[jsonData length] encoding:NSUTF8StringEncoding];
    }
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    NSData *requestData = [JSONString dataUsingEncoding:NSUTF8StringEncoding];
    
    
    
    [urlRequest setHTTPMethod:@"PUT"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [urlRequest setValue:tmpAuthToken forHTTPHeaderField:@"authToken"];
    [urlRequest setValue:employerID forHTTPHeaderField:@"employerId"];
    [urlRequest setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
    [urlRequest setHTTPBody: requestData];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}
-(void) callDeleteSchedule{
    [self startSpinner];
    spinner.labelText = @"Deleting Schedule..";
    
    UIAlertView *alert;
    NSString *httpPostString;
    UserClass *user = [UserClass getInstance];
    
    
    //    user.authToken = @"f57fd8bf-3b12-4012-b580-9ab0be6e8303";
    NSString *employerID = [user.employerID stringValue];
    httpPostString = [NSString stringWithFormat:@"%@schedules/%@", SERVER_URL, [self.selectedSchedule valueForKey:@"id"]];
    
    NSString *tmpAuthToken = user.authToken;
    //    tmpAuthToken = @"cfb75f27-abbe-4c98-8319-d410f661d3f5";
    
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    //    NSData *requestData = [JSONString dataUsingEncoding:NSUTF8StringEncoding];
    
    
    
    [urlRequest setHTTPMethod:@"DELETE"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Accept"];
    [urlRequest setValue:@"application/json" forHTTPHeaderField:@"Content-Type"];
    [urlRequest setValue:tmpAuthToken forHTTPHeaderField:@"authToken"];
    [urlRequest setValue:employerID forHTTPHeaderField:@"employerId"];
    //    [urlRequest setValue:[NSString stringWithFormat:@"%d", [requestData length]] forHTTPHeaderField:@"Content-Length"];
    //   [urlRequest setHTTPBody: requestData];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

#pragma mark -
#pragma mark Picker Data Source Methods

- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView
{
    return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component
{
    return [employeeList count];
}

#pragma mark Picker Delegate Methods

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component
{
    NSString *name = [employeeList objectAtIndex:row];
    
    return name;
}

-(void) startSpinner{
    if (!spinner)
    {
        spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    
    [self.view addSubview:spinner];
    [spinner show:YES];
}

-(void) stopSpinner{
    [spinner hide:YES];
}


@end

//
//  CreateEmployerAccountViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 2/28/14.
//  Copyright (c) 2014 ezNova Technologies LLC. All rights reserved.
//

#import "CreateEmployerAccountViewController.h"
#import "user.h"
#import "mixpanel.h"
#import "CommonLib.h"
#import "TermsOfServiceViewController.h"
#import "LoginViewController.h"
#import "ECSlidingViewController.h"
#import "MenuViewController.h"
#import "MetricsLogWebService.h"

@interface CreateEmployerAccountViewController ()

@end

@implementation CreateEmployerAccountViewController

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
	// Do any additional setup after loading the view.
    _nameTextField.delegate = (id) self;
    _passwordTextField.delegate = (id) self;
 //   [_nameTextField setReturnKeyType:UIReturnKeyDone];
    [_passwordTextField setReturnKeyType:UIReturnKeyGo];
    _passwordTextField.tag = 123;
    
    
    [self registerForKeyboardNotifications];


}
- (void)viewDidUnload
{
    _spinner = nil;
    [super viewDidUnload];

}

- (void)viewWillAppear:(BOOL)animated
{
    
    [super viewWillAppear:animated];
//    if (![self.slidingViewController.underLeftViewController isKindOfClass:[MenuViewController class]]) {
//        self.slidingViewController.underLeftViewController  = [self.storyboard instantiateViewControllerWithIdentifier:@"Menu"];
  //  }
    
    
  //  [self.view addGestureRecognizer:self.slidingViewController.panGesture];

    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 650)];
    _scrollView.backgroundColor = UIColorFromRGB(ORANGE_COLOR);;

}

// Call this method somewhere in your view controller setup code.
- (void)registerForKeyboardNotifications
{
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    
}
// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    
    UIEdgeInsets contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
    
    // If active text field is hidden by keyboard, scroll it so it's visible
    CGRect aRect = self.view.frame;
    aRect.size.height -= kbSize.height;
    if (!CGRectContainsPoint(aRect, _passwordTextField.frame.origin) ) {
        [self.scrollView scrollRectToVisible:_passwordTextField.frame animated:YES];
    }
    
}

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
}


-(void) hideKeyboard{
    [_nameTextField resignFirstResponder];
    [_emailTextField resignFirstResponder];
    [_passwordTextField resignFirstResponder];
}

-(void)removeKeyboard{
    [_nameTextField resignFirstResponder];
    [_emailTextField resignFirstResponder];
    [_passwordTextField resignFirstResponder];
}



- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (IBAction)doCreateAccount:(id)sender {
    [self hideKeyboard];
    if ([_nameTextField.text length] == 0) {
        UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a Name" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        if ([_emailTextField.text length] == 0) {
            UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter an Email" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else{
            if ([_passwordTextField.text length] == 0) {
                UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a Password" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
                
            }
            else{
                
                if ([CommonLib validateEmail:_emailTextField.text])
                {
                    [self startSpinner ];
                    [self callAddGetAuthWebService];
                }
                else{
                    UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a valid email" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
                    [alert show];
                }
            }

        }
    }

}
- (BOOL)textFieldShouldReturn:(UITextField *)theTextField {
    if (theTextField.tag == 123)
        [self doCreateAccount:self];
    [self removeKeyboard];
    return YES;
    
}


- (IBAction)doSignIn:(id)sender {
    
//    [self.delegate loginViewControllerWasSelected:self];

//    LoginViewController *loginController = [self.storyboard instantiateViewControllerWithIdentifier:@"Login"];
    //pass the delegate so when login finishes it calls back the delegate (initialslidingviewcontroller)
//    loginController.delegate = (id) self.delegate;
//    loginController.source = self;
    [self.delegate loginViewControllerWasSelected:self];
    //[self presentViewController:loginController animated:YES completion:nil];
}

- (IBAction)doTermsofService:(id)sender {
    TermsOfServiceViewController *termsOfServiceViewController = [self.storyboard instantiateViewControllerWithIdentifier:@"TermsOfService"];

    UINavigationController *termsOfServiceNavigationController = [[UINavigationController alloc] initWithRootViewController:termsOfServiceViewController];

    termsOfServiceViewController.delegate = (id) self;

    termsOfServiceNavigationController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    
    
    [self presentViewController:termsOfServiceNavigationController animated:YES completion:nil];

}


//call getUserAccount to get the type if they are employer or employee and also to get the id
-(void) callAddGetAuthWebService{
    
    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    NSString *userName = _nameTextField.text;
    NSString *userEmail = _emailTextField.text;
    NSString *userPassword = _passwordTextField.text;
    
    httpPostString = [NSString stringWithFormat:@"%@employer/addGetAuth", SERVER_URL];
    
    request_body = [NSString
                    stringWithFormat:@"developerToken=%@&employerName=%@&emailAddress=%@&password=%@",
                    [DEV_TOKEN        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userName     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userEmail     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [userPassword     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding                    ]];

    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection  = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        int statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [self stopSpinner];
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
   data = [[NSMutableData alloc] init];
}

-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [self stopSpinner];
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    
    UIAlertView *alert;
    NSError *error = nil;
    UserClass *user = [UserClass getInstance];
    //save the user email
    user.userEmail = _emailTextField.text;
    user.employerName = _nameTextField.text;
  //check for error code 8
    NSString *jsonString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
   
    int errorValue = [[results valueForKey:@"errorCode"] intValue];

    
    if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"]))
    {
        //if the account already exists show the message that the service sends back else give them a generic message
        if (errorValue == WEB_SERVICE_ACCOUNT_EXIST_ERROR){
            alert = [[UIAlertView alloc] initWithTitle:nil message:resultMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        }
        else{
            [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from CreateEmployerAccountViewController JSON Parsing Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];

            alert = [[UIAlertView alloc] initWithTitle:nil message:@"Error Creating Account!" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        }
        [alert show];
    }
    else {

        NSArray *authTokens = [results valueForKey:@"activeAuthTokens"];
        //pick the first one need to change later
        NSDictionary *authToken = [authTokens objectAtIndex:0];
        user.authToken = [authToken valueForKey:@"authToken"];
        user.employerID = [authToken valueForKey:@"employerId"];
        user.userType = @"employer";
        
        //save data
            
        [[NSUserDefaults standardUserDefaults] setInteger:[user.employerID intValue] forKey:@"employerId"];
        [[NSUserDefaults standardUserDefaults] setValue:user.userType forKey:@"userType"];
            
        [[NSUserDefaults standardUserDefaults] setValue:user.employerName forKey:@"name"];
            
        [[NSUserDefaults standardUserDefaults] setObject:user.authToken forKey:@"authToken"];
        [[NSUserDefaults standardUserDefaults] setObject:user.userEmail forKey:@"userEmail"];
        [[NSUserDefaults standardUserDefaults] synchronize]; //write out the data
            
            
        //log to mixpanel if we are production
        if ([CommonLib isProduction])
        {
            Mixpanel *mixpanel = [Mixpanel sharedInstance];
                
            [mixpanel track:@"Registered" properties:@{ @"email": _emailTextField.text}];
        }
        
        [self.delegate CreateEmployerAccountViewControllerDidFinish:self];

     }
    
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}


-(void) startSpinner{
    if (!self.spinner)
    {
        self.spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    self.spinner.labelText = @"Creating Account..";
    [self.view addSubview:self.spinner];
    [self.spinner show:YES];
}

-(void) stopSpinner{
    [self.spinner hide:YES];
}

- (void)termsOfServiceControllerDidFinishViewing:(TermsOfServiceViewController *)controller
{
    
    [self dismissViewControllerAnimated:YES completion:nil];
}





@end

//
//  EmailTimeSheetViewController.m
//  Created by Raya Khashab on 10/6/13.
//  Copyright (c) 2013 ezNova Technologies LLC. All rights reserved.
//

#import "EmailTimeSheetViewController.h"
#import "user.h"
#import <QuartzCore/QuartzCore.h>
#import "CommonLib.h"
#import "Mixpanel.h"

@interface EmailTimeSheetViewController ()

@end

@implementation EmailTimeSheetViewController

@synthesize MessageTextView = _MessageTextView;
@synthesize MessageLabel;
@synthesize EmailTextEdit = EmailTextEdit;
@synthesize SubjectLabel = _SubjectLabel;
@synthesize delegate = _delegate;
@synthesize startDate;
@synthesize endDate;
@synthesize employeeID;

bool messageTextViewEditing = FALSE;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil

{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
        startDate = @"";
        endDate = @"";
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    //create a TextView inside TextField to get the border around it

    
    //put a borde on the text field
    _MessageTextView.text = @"";
    CALayer *imageLayer = _MessageTextView.layer;
    [imageLayer setCornerRadius:10];
    [imageLayer setBorderWidth:2.1];
    imageLayer.borderColor=[[UIColor lightGrayColor] CGColor];

    EmailTextEdit.delegate = self;
    _fromTextField.delegate = self;
    _MessageTextView.delegate = self;
    [_fromTextField setReturnKeyType:UIReturnKeyDone];
    [EmailTextEdit setReturnKeyType:UIReturnKeyDone];
    
    
    [self registerForKeyboardNotifications];



}

- (void)viewWillAppear:(BOOL)animated
{
	[super viewWillAppear: animated];
    UserClass *user = [UserClass getInstance];
    
    //use this flag to figure out when the message text view is being edited so we scroll the screen since the keyboard is hiding it
    messageTextViewEditing = FALSE;
    
    UIToolbar* keyboardToolbar = [[UIToolbar alloc] init];
    [keyboardToolbar sizeToFit];
    UIBarButtonItem *flexBarButton = [[UIBarButtonItem alloc]
                                      initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                      target:nil action:nil];
    UIBarButtonItem *doneBarButton = [[UIBarButtonItem alloc]
                                      initWithBarButtonSystemItem:UIBarButtonSystemItemDone
                                      target:self action:@selector(keyboardDoneBtnPressed)];
    keyboardToolbar.items = @[flexBarButton, doneBarButton];
    _MessageTextView.inputAccessoryView = keyboardToolbar;
    
    _submitBtn.hidden = YES;
    //show the string that got passed to us
    _SubjectLabel.text = [NSString stringWithFormat:@"%@ - %@ Time Sheet", startDate, endDate];
    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 900)];
    _scrollView.delaysContentTouches = NO;

    _scrollView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    
    _optionsViewContainer.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    _bottomViewContainer.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    _mainView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    _lastViewSection.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);;
    
    
    if (!_emailAllTimeSheets)
    {

        
        CGRect frame2 = [_bottomViewContainer frame];
        frame2.origin.y = _optionsViewContainer.frame.origin.y;  // shift the message view up
        [_bottomViewContainer setFrame:frame2];

        
        [_optionsViewContainer removeFromSuperview];

        CGRect frame = [_lastViewSection frame];
        frame.origin.y = _bottomViewContainer.frame.origin.y + _bottomViewContainer.frame.size.height;  // shift up the last view to the message view
        [_lastViewSection setFrame:frame];

        //     _optionsViewContainer.hidden = YES; //hide the option since it's only valid for EmailAllTimeSheets
    

    }
    else
    {
       NSUInteger emailOption =  [[NSUserDefaults standardUserDefaults] integerForKey:@"optionUseDecimalFormat"];
        if (emailOption == 1)
            [_decimalOptionSwitch setOn:YES];

    }
    
    
    //sometimes like in the personal app the userEmail doesn't contain the actual email so check it first
    if ([CommonLib validateEmail:user.userEmail])
        _fromTextField.text = user.userEmail;
    //if the user is an employer and didn't select email all time sheets then default to employee email
    if ((!_emailAllTimeSheets) && [user.userType isEqual:@"employer"])
        EmailTextEdit.text = _employeeEmail;
    else
        EmailTextEdit.text = user.lastEmailToSent;


    UIBarButtonItem* sendButton = [[UIBarButtonItem alloc] initWithTitle:@"Send" style:UIBarButtonItemStylePlain target:self action:@selector(sendButtonAction)];
    
    
    self.navigationItem.rightBarButtonItem = sendButton;

    NSDictionary *navbarTitleTextAttributes = [NSDictionary dictionaryWithObjectsAndKeys:
                                               [UIColor whiteColor],
                                               NSForegroundColorAttributeName,
                                               nil];
    [self.navigationController.navigationBar setTitleTextAttributes:navbarTitleTextAttributes];

    [self removeKeyboard];

    
}


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

- (void)viewDidUnload {
    [self setEmailTextEdit:nil];
    [self setSubjectLabel:nil];
    [self setMessageTextView:nil];
    [self setMessageLabel:nil];
    [super viewDidUnload];
}
- (BOOL)textViewShouldBeginEditing:(UITextView *)textView {
    
    messageTextViewEditing = TRUE;
    return  YES;
}

// Call this method somewhere in your view controller setup code.
- (void)registerForKeyboardNotifications
{
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    
}

// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    if (messageTextViewEditing)
    {
        messageTextViewEditing = FALSE;
        NSDictionary* info = [aNotification userInfo];
        CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
        
        UIEdgeInsets contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
        _scrollView.contentInset = contentInsets;
        _scrollView.scrollIndicatorInsets = contentInsets;
        
        // If active text field is hidden by keyboard, scroll it so it's visible
        // Your app might not need or want this behavior.
        CGRect aRect = self.view.frame;
        aRect.size.height -= kbSize.height;
        
        CGRect scrollFrame = _lastViewSection.frame;
        scrollFrame.size.height = (scrollFrame.size.height - 50);
        
        if (!CGRectContainsPoint(aRect, _MessageTextView.frame.origin) ) {
            [_scrollView scrollRectToVisible:scrollFrame animated:YES];
            
        }
    }
}
-(void)keyboardDoneBtnPressed
{
    [_MessageTextView resignFirstResponder];
}

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    [_scrollView scrollRectToVisible:_fromTextField.frame animated:YES];
        
        //UIEdgeInsets contentInsets = UIEdgeInsetsZero;
        //_scrollView.contentInset = contentInsets;
        //_scrollView.scrollIndicatorInsets = contentInsets;

    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
}


-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        NSInteger statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
    data = [[NSMutableData alloc] init];
}
-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;

    //do nothing with the data since we don't want to wait for it to go through or not
    NSError *error = nil;
    UIAlertView *alert;
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
    if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"]))
    {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to send emails at this time. If this error persist please contact support@ezclocker.com" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}

-(void) emailTimeSheet{
    UserClass *user = [UserClass getInstance];
    
    //log to mixpanel if we are production
//    if ([CommonLib isProduction])
//    {
//        Mixpanel *mixpanel = [Mixpanel sharedInstance];
        
//        [mixpanel track:@"Email TimeSheet" properties:@{ @"email": user.userEmail}];
//    }

    UIAlertView *alert;
    NSString *httpPostString;
    NSString *request_body;
    NSString *userEmployerID = [NSString stringWithFormat:@"%@", user.employerID];
    NSTimeZone *timeZone = [NSTimeZone localTimeZone];
    NSString *timeZoneId = timeZone.name;
   // ProgramConstants.SERVER_URL + "/email/csvReport/" + employerID + "/" + employeeID;
    

    NSString *subjectLine = [NSString stringWithFormat:@"%@ for %@", _SubjectLabel.text, _fromTextField.text];
                             
    if (_emailAllTimeSheets)
    {
        //for this call the dates need to be in ISO format
        NSDateFormatter *dateFormatterMMDDYYYY = [[NSDateFormatter alloc] init];
        [dateFormatterMMDDYYYY setLocale: [[NSLocale alloc]
                                           initWithLocaleIdentifier:@"en_US"]];
        [dateFormatterMMDDYYYY setDateFormat:@"MM/dd/yyyy"];
        
        NSDateFormatter *dateFormatterIso8601 = [[NSDateFormatter alloc] init];
        [dateFormatterIso8601 setLocale: [[NSLocale alloc]
                                   initWithLocaleIdentifier:@"en_US"]];
        [dateFormatterIso8601 setDateFormat:@"yyyy-MM-dd"];

        NSDate *dateValue = [dateFormatterMMDDYYYY dateFromString:startDate];
        startDate = [dateFormatterIso8601 stringFromDate:dateValue];
        dateValue = [dateFormatterMMDDYYYY dateFromString:endDate];
        endDate = [dateFormatterIso8601 stringFromDate:dateValue];
        
        NSString *decimalOption = @"false";
        if ([_decimalOptionSwitch isOn])
            decimalOption = @"true";

        httpPostString = [NSString stringWithFormat:@"%@email/csvReport/%@", SERVER_URL, userEmployerID];

        request_body = [NSString
 //                       stringWithFormat:@"authToken=%@&timeZoneId=%@&startDateIso8601=%@&endDateIso8601=%@&toEmail=%@&subject=%@&message=%@&employeeName=%@&totalsAsDecimal=true",
                        stringWithFormat:@"authToken=%@&timeZoneId=%@&startDateIso8601=%@&endDateIso8601=%@&toEmail=%@&subject=%@&message=%@&employeeName=%@&totalsAsDecimal=%@",
                        [user.authToken        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [timeZoneId     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [startDate     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [endDate     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [EmailTextEdit.text     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [subjectLine     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [_MessageTextView.text     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [_fromTextField.text     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                         [decimalOption     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]
                         ];
    }
    else{
        httpPostString = [NSString stringWithFormat:@"%@email/csvReport/%@/%@", SERVER_URL, userEmployerID, employeeID];

        request_body = [NSString
                        stringWithFormat:@"authToken=%@&timeZoneId=%@&startDate=%@&endDate=%@&toEmail=%@&subject=%@&message=%@&employeeName=%@",
                        [user.authToken        stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [timeZoneId     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [startDate     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [endDate     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [EmailTextEdit.text     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [subjectLine     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [_MessageTextView.text     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                        [_fromTextField.text     stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding
                         ]];
    }
    
    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
    
}

-(void) sendEmail{
    if (![CommonLib validateEmail:EmailTextEdit.text])
    {
        UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a valid email address" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        UserClass *user = [UserClass getInstance];
        //save the last email so they don't have to type it again. Mostly used for employees trying to email time sheets not employers. For employers we don't want to save it if they came from the employee email time sheet and they didn't override the employee email
        bool saveEmail = true;
        if (([user.userType isEqualToString:@"employer"]) && ((!_emailAllTimeSheets) && ([_employeeEmail isEqualToString: EmailTextEdit.text])))
            saveEmail = false;
        if (saveEmail)
            user.lastEmailToSent = EmailTextEdit.text;
        [[NSUserDefaults standardUserDefaults] setValue:user.lastEmailToSent forKey:@"lastEmailToSent"];
        [[NSUserDefaults standardUserDefaults] synchronize]; //write out the data

        //call webservice to send the email
        [self emailTimeSheet];
        //send message back to the delegate to close the view since we don't care to wait and check if the mail got sent or not
        [self.delegate emailTimeSheetViewControllerDidFinish:self];
        
        
    }

}

-(void) sendButtonAction{
    [self sendEmail];
}



- (IBAction)doSubmitEmail:(id)sender {
    [self sendEmail];
}

- (IBAction)doOptionSwitchChanged:(id)sender {
    if([_decimalOptionSwitch isOn])
        [[NSUserDefaults standardUserDefaults] setInteger:1 forKey:@"optionUseDecimalFormat"];
    else
        [[NSUserDefaults standardUserDefaults] setInteger:0 forKey:@"optionUseDecimalFormat"];
    
    [[NSUserDefaults standardUserDefaults] synchronize];

}


-(void)removeKeyboard{
    [_fromTextField resignFirstResponder];
    [EmailTextEdit resignFirstResponder];
    [_MessageTextView resignFirstResponder];
}



- (BOOL)textFieldShouldReturn:(UITextField *)textField {
    [self removeKeyboard];
    return YES;
}



- (IBAction)doCancel:(id)sender {
    [self.delegate emailTimeSheetViewControllerDidFinish:self];

}
@end

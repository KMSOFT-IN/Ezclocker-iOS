//
//  AddTimeEntryViewController.m
//  TCS Mobile
//
//  Created by Raya Khashab on 11/10/12.
//  Copyright (c) 2013 ezNova Technologies LLC. All rights reserved.
//

#import "AddTimeEntryViewController.h"
#import "user.h"
#import "CommonLib.h"
#import "Mixpanel.h"
#import "MetricsLogWebService.h"

@interface AddTimeEntryViewController ()

@end

@implementation AddTimeEntryViewController
@synthesize clockInLabel;
@synthesize clockOutLabel;
@synthesize spinner = _spinner;
@synthesize delegate = _delegate;
@synthesize employeeID;



- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    // Do any additional setup after loading the view from its nib.
    
    clockInTime = @"";
    clockOutTime = @"";
    formatterISO8601DateTime = [[NSDateFormatter alloc] init]; 
    [formatterISO8601DateTime setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZ"];
    formatterDateTime = [[NSDateFormatter alloc] init];
    [formatterDateTime setDateFormat:@"MM/dd/yyyy HH:mm:ss"];
    formatterDateTime12 = [[NSDateFormatter alloc] init];
    [formatterDateTime12 setDateFormat:@"MM/dd/yyyy h:mm:ss a"];
    TextFieldMode = 1;
    
    CGRect screenBound = [[UIScreen mainScreen] bounds];
    CGSize screenSize = screenBound.size;
    CGFloat screenHeight = screenSize.height;
    
    pickerViewDate = [[UIView alloc] initWithFrame:CGRectMake(0, screenHeight-300, 320, 246)];
    [pickerViewDate setBackgroundColor:[UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1.0]];

    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0, 44, 0, 0)];
    theDatePicker.datePickerMode = UIDatePickerModeDateAndTime;
    theDatePicker.hidden = NO;
    NSDate *date = [NSDate date];
    theDatePicker.date = date;

    
//    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0.0, 44.0, 0.0, 0.0)];
//    theDatePicker.datePickerMode = UIDatePickerModeDateAndTime;
//    [UIView appearanceWhenContainedIn:[UITableView class], [UIDatePicker class], nil].backgroundColor = [UIColor colorWithWhite:1 alpha:1];

//    [theDatePicker addTarget:self action:nil forControlEvents:UIControlEventValueChanged];
    
//    theDatePicker.backgroundColor = [UIColor whiteColor];

    
}

- (void)viewDidUnload
{
    _spinner = nil;
    [self setClockInLabel:nil];
    [self setClockOutLabel:nil];
    theDatePicker = nil;
    pickerToolbar = nil;
    pickerViewDate = nil;

    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

-(void) viewWillAppear:(BOOL)animated{
    [_clockInButton setTitle:@"" forState:UIControlStateNormal];
    [_clockOutButton setTitle:@"" forState:UIControlStateNormal];

    _mainView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    
    _scrollView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);
    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 650)];
    _scrollView.delaysContentTouches = NO;
    
    NSDictionary *navbarTitleTextAttributes = [NSDictionary dictionaryWithObjectsAndKeys:
                                               [UIColor whiteColor],
                                               NSForegroundColorAttributeName,
                                               nil];
    [self.navigationController.navigationBar setTitleTextAttributes:navbarTitleTextAttributes];

    [self removeKeyboard];

}



-(void)removeKeyboard{
 //   [_clockInTextField resignFirstResponder];
 //   [_clockOutTextField resignFirstResponder];
}


// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
}


- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}



- (IBAction)doTimeEntryCancel:(id)sender {
    [self.delegate addTimeEntryViewControllerDidFinish:self];
}


-(void) callCreateTimeEntryWebService{
    //NSString *currentDateTime = self.getCurrentDateTime;
    UserClass *user = [UserClass getInstance];
    UIAlertView *alert;
    NSString *description =@"new time entry";
    NSString *source =@"IPHONE";
    NSDate *DateValue = [formatterDateTime12 dateFromString:_clockInButton.titleLabel.text];
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    clockInTime = [formatterISO8601DateTime stringFromDate:DateValue];
    clockInTime  = [clockInTime stringByReplacingOccurrencesOfString:@"+0000" withString:@"Z"];
    clockInTime  = [clockInTime stringByReplacingOccurrencesOfString:@"-0000" withString:@"Z"];
    
    //for some reason once in a while we get p.m. in the string which casues all sort of errors so take it out
    clockInTime = [clockInTime stringByReplacingOccurrencesOfString:@" p.m." withString:@""];
    clockInTime = [clockInTime stringByReplacingOccurrencesOfString:@" p. m." withString:@""];
    clockInTime = [clockInTime stringByReplacingOccurrencesOfString:@" a.m." withString:@""];

    
    DateValue = [formatterDateTime12 dateFromString:_clockOutButton.titleLabel.text];
    clockOutTime = [formatterISO8601DateTime stringFromDate:DateValue];
    clockOutTime  = [clockOutTime stringByReplacingOccurrencesOfString:@"+0000" withString:@"Z"];
    clockOutTime  = [clockOutTime stringByReplacingOccurrencesOfString:@"-0000" withString:@"Z"];
    
    //for some reason once in a while we get p.m. in the string which casues all sort of errors so take it out
    clockOutTime = [clockOutTime stringByReplacingOccurrencesOfString:@" p.m." withString:@""];
    clockOutTime = [clockOutTime stringByReplacingOccurrencesOfString:@" p. m." withString:@""];
    clockOutTime = [clockOutTime stringByReplacingOccurrencesOfString:@" a.m." withString:@""];

    
    NSString *httpPostString;
    NSString *request_body;
    NSString *userEmployerID = [NSString stringWithFormat:@"%@", user.employerID];
    NSString *employeeIDStr = [NSString stringWithFormat:@"%@", employeeID];
    NSTimeZone *timeZone = [NSTimeZone localTimeZone];
    NSString *timeZoneId = timeZone.name;
    
    httpPostString = [NSString stringWithFormat:@"%@timeEntry/create", SERVER_URL];
    //Implement request_body for send request here authToken and clock DateTime set into the body.
    request_body = [NSString 
                        stringWithFormat:@"employerId=%@&employeeId=%@&authToken=%@&clockInISO8601Utc=%@&clockOutISO8601Utc=%@&description:=%@&timeZoneId:=%@&source:=%@",
                    [userEmployerID  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [employeeIDStr   stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [user.authToken   stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [clockInTime  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [clockOutTime  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [description  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [timeZoneId  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding],
                    [source  stringByAddingPercentEscapesUsingEncoding:NSUTF8StringEncoding]
                        ];
        
    NSLog(@"JSON I sent:%@", request_body);

    NSMutableURLRequest *urlRequest = [[NSMutableURLRequest alloc] initWithURL:[NSURL URLWithString:httpPostString]];
    
    //set HTTP Method
    [urlRequest setHTTPMethod:@"POST"];
    
    //set request body into HTTPBody.
    [urlRequest setHTTPBody:[request_body dataUsingEncoding:NSUTF8StringEncoding]];
    
    //set request url to the NSURLConnection
    NSURLConnection *connection = [[NSURLConnection alloc] initWithRequest:urlRequest  delegate:self startImmediately:YES];
    if (connection)
        [UIApplication sharedApplication].networkActivityIndicatorVisible = YES;
    else {
        alert = [[UIAlertView alloc] initWithTitle:nil message:@"Connection to the server failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    
}

-(void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
{
    if ([response isKindOfClass: [NSHTTPURLResponse class]]) {
        int statusCode = [(NSHTTPURLResponse*) response statusCode];
        if (statusCode == SERVICE_UNAVAILABLE_ERROR){
            [self stopSpinner];
            [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
            
            //error 503 is when tomcat is down
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        }
    }
    
    
    data = [[NSMutableData alloc] init];
}

-(void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)dataIn
{
    [data appendData:dataIn];
}

-(void)connectionDidFinishLoading:(NSURLConnection *)connection
{
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    //    [self.myWebView loadHTMLString:[[NSString alloc]initWithData:data encoding:NSUTF8StringEncoding] baseURL:nil];
    [self stopSpinner];
    UIAlertView *alert;
    NSError *error = nil;
    NSDictionary *results = data ? [NSJSONSerialization JSONObjectWithData:data options:0 error:&error] : nil;
    NSString *resultMessage = [results valueForKey:@"message"];
    //if message is null or <> Success then the call failed
    if (([resultMessage isEqual:[NSNull null]]) || (![resultMessage isEqualToString:@"Success"])){
        [MetricsLogWebService LogException: [NSString stringWithFormat:@"Error from AddTimeEntryViewController JSON Parsing Error= %@ resultMessage= %@", error.localizedDescription, resultMessage]];

        if ([resultMessage isEqual:[NSNull null]]){
            alert = [[UIAlertView alloc] initWithTitle:nil message:@"Time Entry from Server Failed" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        }
        else
            alert = [[UIAlertView alloc] initWithTitle:nil message:resultMessage delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
    }
    else {
        //log to mixpanel if we are production
        if ([CommonLib isProduction])
        {
            Mixpanel *mixpanel = [Mixpanel sharedInstance];
            UserClass *user = [UserClass getInstance];
            [mixpanel track:@"Add Time Entry" properties:@{ @"email": user.userEmail}];
        }

        [self.delegate addTimeEntryViewControllerDidFinish:self];
    }

    
}

- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
{
    // release the connection, and the data object
    // receivedData is declared as a method instance elsewhere
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    [self stopSpinner];
    
    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"ezClocker is unable to connect to the server at this time. Please try again later" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alert show];
    
    connection = nil;
    data = nil;
}

-(void) startSpinner{
    if (!self.spinner)
    {
        self.spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    self.spinner.labelText = @"Connecting to the server";
    [self.view addSubview:self.spinner];
    [self.spinner show:YES];
}

-(void) stopSpinner{
    [self.spinner hide:YES];
}

- (IBAction)doTimeEntrySave:(id)sender {
    if ([clockInLabel.text length] == 0) {
        UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a Clock In Time" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else{
        if ([clockOutLabel.text length] == 0) {
            UIAlertView  *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a Clock Out Time" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        else{

            [self startSpinner ];
            [self callCreateTimeEntryWebService];
        }
    }
}



-(void)touchesBegan:(NSSet*)trigger withEvent:(UIEvent*)event{
    UITouch *touch = [trigger anyObject];
    
    if((touch.view.tag == 1) || (touch.view.tag == 2)){
        CGRect pickerFrame = CGRectMake(0,245,320,216);
        pickDate = [[UIDatePicker alloc]initWithFrame:pickerFrame];
        
        [pickDate addTarget:self action:@selector(dateSelected:)forControlEvents:UIControlEventValueChanged];
        [self.view addSubview:pickDate];
        
        if (touch.view.tag == 1){
            TextFieldMode = 1;
            if (![clockInLabel.text isEqualToString:@""])
                pickDate.date = [formatterDateTime12 dateFromString:clockInLabel.text];
        }
        else {
            TextFieldMode = 2;
            if (![clockOutLabel.text isEqualToString:@""])
                pickDate.date = [formatterDateTime12 dateFromString:clockOutLabel.text];
        }
    }
}
-(void)dateSelected:(id)sender{
    
    if (TextFieldMode == 1)
        [_clockInButton setTitle:[formatterDateTime12 stringFromDate:[sender date]] forState:UIControlStateNormal];

    else {
        [_clockOutButton setTitle:[formatterDateTime12 stringFromDate:[sender date]] forState:UIControlStateNormal];

    }
}


-(BOOL)closeDatePicker:(id)sender{
//    [pickerViewDate dismissWithClickedButtonIndex:0 animated:YES];
     [pickerViewDate removeFromSuperview];
    return YES;
}

-(IBAction)DatePickerDoneClick{
    UIButton *curButton;
    if (TextFieldMode == 1)
        curButton = _clockInButton;
    else
        curButton= _clockOutButton;
    [curButton setTitle:[formatterDateTime12 stringFromDate:theDatePicker.date] forState:UIControlStateNormal];
    
    [self closeDatePicker:self];
}

-(IBAction)DatePickerCancelClick{
    [self closeDatePicker:self];
}


-(void) showDatePicker{
    
    pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 64)];
    pickerToolbar.barStyle=UIBarStyleBlackOpaque;

    [pickerToolbar sizeToFit];
    
    UIBarButtonItem *cancelBtn = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerCancelClick)];
    
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];
    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];
    
    UIBarButtonItem *titleButton = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];
    if (TextFieldMode == 1)
        titleLabel.text = @"Clock In";
    else
        titleLabel.text = @"Clock Out";
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerDoneClick)];

    
    NSArray *itemArray = [[NSArray alloc] initWithObjects:cancelBtn, flexSpace, titleButton, flexSpace, doneDateBarBtn, nil];
    
    [pickerToolbar setItems:itemArray animated:YES];
    
    UIButton *curButton;
    if (TextFieldMode == 1)
        curButton = _clockInButton;
    else
        curButton = _clockOutButton;
    
    BOOL isEmpty = !(_clockOutButton.titleLabel.text && _clockOutButton.titleLabel.text.length > 0);

    if (! isEmpty)
        theDatePicker.date = [formatterDateTime12 dateFromString:curButton.titleLabel.text];
    else
        [curButton setTitle:[formatterDateTime12 stringFromDate:theDatePicker.date] forState:UIControlStateNormal];
    
        [pickerViewDate addSubview:pickerToolbar];
        [pickerViewDate addSubview:theDatePicker];
        
        [self.view addSubview:pickerViewDate];
    
}


- (IBAction)doClockInBtnClick:(id)sender {
    TextFieldMode = 1;
    [self showDatePicker];

}
- (IBAction)clockOutBtnClick:(id)sender {
    TextFieldMode = 2;
    [self showDatePicker];

}
@end

//
//  TimeSheetDetailViewController.m
//  ezClocker
//
//  Created by Raya Khashab on 10/22/13.
//  Copyright (c) 2013 ezNova Technologies LLC. All rights reserved.
//

#import "TimeSheetDetailViewController.h"
#import "user.h"
#import <QuartzCore/QuartzCore.h>
#import "CommonLib.h"
#import "EZAnnotation.h"
#import "TimeEntryHistoryViewController.h"
#import "MapViewController.h"
#import "CheckClockStatusWebService.h"
#import "DataManager.h"
#import "NSString+Extensions.h"
#import "NSDate+Extensions.h"
#import "TimeEntry+Extensions.h"
#import "debugdefines.h"
#import "TimeEntry.h"
#import "TimeEntry+CoreDataProperties.h"
#import "ClockInfo.h"
#import "ClockInfo+CoreDataProperties.h"
#import "SharedUICode.h"
#import "ClockInfo+Extensions.h"

@interface TimeSheetDetailViewController () {
}

//@property (nonatomic, copy) NSString* description;
//@property (nonatomic, copy) NSDate* clockInDateValue;
//@property (nonatomic, copy) NSDate* clockOutDateValue;

@end

@implementation TimeSheetDetailViewController

@synthesize timeEntry;
@synthesize description, clockInDateValue, clockOutDateValue;
@synthesize spinner = _spinner;
@synthesize reasonTextField;

@synthesize delegate = _delegate;
@synthesize selectedMode, employeeName;

- (NSString*)clockInDateTime {
    return timeEntry.clockIn ? [timeEntry.clockIn.dateTimeEntry toLongDateTimeString] : @"";
}

- (NSString*)clockOutDateTime {
    return timeEntry.clockOut ? [timeEntry.clockOut.dateTimeEntry toLongDateTimeString] : @"";
}

- (CLLocationCoordinate2D)clockInLocation {
    return timeEntry.clockIn ? timeEntry.clockIn.location : CLLocationCoordinate2DMake(0.0, 0.0);
}

- (CLLocationCoordinate2D)clockOutLocation {
    return timeEntry.clockOut ? timeEntry.clockOut.location : CLLocationCoordinate2DMake(0.0, 0.0);
}

- (NSString*)clockInGpsDataStatus {
    return timeEntry.clockIn ? timeEntry.clockIn.gpsDataStatus : @"";
}

- (NSString*)clockOutGpsDataStatus {
    return timeEntry.clockOut ? timeEntry.clockOut.gpsDataStatus : @"";
}

- (NSString*)notes {
    return [NSString trim:timeEntry.notes];
}

-(id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self){
//        self.title = NSLocalizedString(@"Edit Time Entry", @"Edit Time Entry");
    }
    
    return self;
}

- (id)initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    if (self){
        self.title = NSLocalizedString(@"Edit Time Entry", @"Edit Time Entry");
    }
    
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
    //put a borde on the text field
    reasonTextField.text = @"";
    CALayer *imageLayer = reasonTextField.layer;
    [imageLayer setCornerRadius:10];
    [imageLayer setBorderWidth:2.1];
    imageLayer.borderColor=[[UIColor lightGrayColor] CGColor];
    
    _mapHistoryTable.layer.borderWidth = 0.5;
    _mapHistoryTable.separatorStyle = UITableViewCellSeparatorStyleNone;
    
    UIBarButtonItem* saveButton = [[UIBarButtonItem alloc] initWithTitle:@"Save" style:UIBarButtonItemStylePlain target:self action:@selector(saveButtonAction)];
    
    self.navigationItem.rightBarButtonItem = saveButton;

    
    formatterDateTime12 = [[NSDateFormatter alloc] init];
    [formatterDateTime12 setDateFormat:@"MM/dd/yyyy h:mm:ss a"];
    //formatterDateTime = [[NSDateFormatter alloc] init];
    //[formatterDateTime setDateFormat:@"MM/dd/yyyy HH:mm:ss"];
    formatterISO8601DateTime = [[NSDateFormatter alloc] init];
    [formatterISO8601DateTime setDateFormat:@"yyyy-MM-dd'T'HH:mm:ssZ"];
    [formatterISO8601DateTime setTimeZone:[NSTimeZone timeZoneWithName:@"UTC"]];
    
    [self registerForKeyboardNotifications];
    
    TextFieldMode = 1;
    

    CGRect screenBound = [[UIScreen mainScreen] bounds];
    CGSize screenSize = screenBound.size;
    CGFloat screenHeight = screenSize.height;

    pickerViewDate = [[UIView alloc] initWithFrame:CGRectMake(0, screenHeight-300, 320, 246)];
    [pickerViewDate setBackgroundColor:[UIColor colorWithRed:240/255.0 green:240/255.0 blue:240/255.0 alpha:1.0]];
    
    theDatePicker = [[UIDatePicker alloc] initWithFrame:CGRectMake(0, 44, 0, 0)];
    theDatePicker.datePickerMode = UIDatePickerModeDateAndTime;
    theDatePicker.hidden = NO;
    NSDate *date = [NSDate date];
    theDatePicker.date = date;
    
#ifdef PERSONAL_VERSION
    _reasonLabel.text = @"Notes";
#endif
    
    reasonTextField.delegate = (id) self;
    
    keyboardToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 64)];
    keyboardToolbar.barStyle=UIBarStyleBlackOpaque;
    
    [keyboardToolbar sizeToFit];
    
    
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 200, 20.0f)];
    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];
    titleLabel.text = @"Enter reason for change";
    
    UIBarButtonItem *titleButton = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];

    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStyleBordered target:self action:@selector(keyBoardDoneClick)];
    
    
   
    NSArray *itemArray = [[NSArray alloc] initWithObjects:titleButton, flexSpace, doneDateBarBtn, nil];
    

    
    [keyboardToolbar setItems:itemArray animated:YES];

    [reasonTextField setInputAccessoryView:keyboardToolbar];
    
}

- (void)viewDidUnload
{
    [self setReasonTextField:nil];
    pickerViewDate = nil;
    theDatePicker = nil;
    pickerToolbar = nil;
    
    [super viewDidUnload];
    _spinner = nil;
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

-(void) viewWillDisappear:(BOOL)animated{
    [self.view endEditing:YES];

    [self removeKeyboard];
    [self.view resignFirstResponder];
    [super viewWillDisappear:animated];
}

-(void) viewWillAppear:(BOOL)animated{
    reasonTextField.text = [self notes];


    [_clockInButton setTitle:self.clockInDateTime forState:UIControlStateNormal];
    [_clockOutButton setTitle:self.clockOutDateTime forState:UIControlStateNormal];
    
    //NSString *btnText = _clockOutButton.titleLabel.text;

    [_scrollView setScrollEnabled:YES];
    [_scrollView setContentSize:CGSizeMake(320, 500)];
   // [_scrollView setContentSize:CGSizeMake(320, 650)];
    _scrollView.backgroundColor = UIColorFromRGB(GRAY_BACKGROUND_COLOR);

    
    if ((_editClockMode == ACTIVE_CLOCKIN) ||  (_editClockMode == ACTIVE_CLOCKOUT)) {
        //if we are editing an Active Clockin then re-arange the controls
        //don't show the map and history table and move the delete button
        [_mapHistoryTable removeFromSuperview];
        [_deleteButton removeFromSuperview];
      //  [_mapHistoryTable setHidden:YES];
        
        //make the container the same collor as the scrollview so it blends in
        _viewContainer.backgroundColor = _scrollView.backgroundColor;
        [_viewContainer addSubview:_deleteButton];
        if (_editClockMode == ACTIVE_CLOCKIN)
        {
            _clockInButton.enabled = YES;
            _clockInLabel.enabled = YES;
            _clockOutButton.enabled = NO;
            _clockOutLabel.enabled = NO;
        }
        else{
            _clockInButton.enabled = NO;
            _clockInLabel.enabled = NO;
            _clockOutButton.enabled = YES;
            _clockOutLabel.enabled = YES;
            
        }
        if ([_clockOutButton.titleLabel.text length] == 0)
            //don't let them delete if there is no clock out
            _deleteButton.hidden = YES;
        else
            _deleteButton.hidden = NO;

    }
    //else we are coming from the time sheet master controller
    else{
#ifndef PERSONAL_VERSION
        [_topViewController removeFromSuperview];
        [_viewContainer removeFromSuperview];
#else
        //if we are coming from the personal app don't show them the map or history views - not supported in the personal app
        [_mapHistoryTable removeFromSuperview];
        [_deleteButton removeFromSuperview];
        //make the container the same collor as the scrollview so it blends in
        _viewContainer.backgroundColor = _scrollView.backgroundColor;
        [_viewContainer addSubview:_deleteButton];

#endif
    }

    
    [self removeKeyboard];
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

// Call this method somewhere in your view controller setup code.
- (void)registerForKeyboardNotifications
{
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWasShown:)
                                                 name:UIKeyboardDidShowNotification object:nil];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(keyboardWillBeHidden:)
                                                 name:UIKeyboardWillHideNotification object:nil];
    
}

// Called when the UIKeyboardDidShowNotification is sent.
- (void)keyboardWasShown:(NSNotification*)aNotification
{
    NSDictionary* info = [aNotification userInfo];
    CGSize kbSize = [[info objectForKey:UIKeyboardFrameBeginUserInfoKey] CGRectValue].size;
    UIEdgeInsets contentInsets;
    //if we are coming from the main clockin/out screen
    if ((_editClockMode == ACTIVE_CLOCKIN) ||  (_editClockMode == ACTIVE_CLOCKOUT))
        contentInsets = UIEdgeInsetsMake(65.0, 0.0, kbSize.height, 0.0);
    else
        contentInsets = UIEdgeInsetsMake(0.0, 0.0, kbSize.height, 0.0);
    

    _scrollView.contentInset = contentInsets;
    _scrollView.scrollIndicatorInsets = contentInsets;
    
    // If active text field is hidden by keyboard, scroll it so it's visible
    // Your app might not need or want this behavior.
    CGRect aRect = self.view.frame;
    aRect.size.height -= kbSize.height;
    if (!CGRectContainsPoint(aRect, _mapHistoryTable.frame.origin) ) {
        [self.scrollView scrollRectToVisible:reasonTextField.frame animated:YES];
        
    }
}

// Called when the UIKeyboardWillHideNotification is sent
- (void)keyboardWillBeHidden:(NSNotification*)aNotification
{
    //check the 2 lines
  //  [_scrollView setContentOffset:CGPointMake(0,0) animated:YES];
    [self.scrollView scrollRectToVisible:_clockInButton.frame animated:YES];

    //UIEdgeInsets contentInsets = UIEdgeInsetsZero;
    //_scrollView.contentInset = contentInsets;
    //_scrollView.scrollIndicatorInsets = contentInsets;
}

-(BOOL)textFieldShouldBeginEditing:(UITextField *)textField
{
    // Here You can do additional code or task instead of writing with keyboard
    return NO;
}

#pragma mark - updating a time entry

-(void) callModifyTimeEntryWebService{
    
    //NSString *currentDateTime = self.getCurrentDateTime;
    deleteTimeEntry = FALSE;
    self.description = [NSString trim:reasonTextField.text]; //@"change time entry";

    self.clockInDateValue = [formatterDateTime12 dateFromString:_clockInButton.titleLabel.text];
//    self.clockOutDateValue = nil;

    //checking clockout button if it's enabled is to fix a bug where if you viewed a clock in/out value and pressed the back button then clocked in and did an edit the clock out button will have the last clock out value which would be wrong even though it looks like it's empty in the UI screen
    if (_clockOutButton.enabled)
    {
        self.clockOutDateValue = [formatterDateTime12 dateFromString:_clockOutButton.titleLabel.text];
    }
    else
        self.clockOutDateValue = [formatterDateTime12 dateFromString:self.clockOutDateTime];
    
    DataManager* manager = [DataManager sharedManager];
    [manager modifyTimeEntryOnServer:timeEntry clockIn:self.clockInDateValue clockOut:self.clockOutDateValue notes:self.description withCompletion:^(NSInteger errorCode, NSString * _Nullable resultMessage, NSDictionary * _Nullable results, NSError * _Nullable error) {

        [self stopSpinner];

        switch (errorCode) {
            case DATAMANAGER_BUSY: {
                [SharedUICode displayServerIsBusy];
                break;
            }
            case SERVICE_UNAVAILABLE_ERROR: {
                [SharedUICode displayServiceUnavailableErrorWithMsg:@"NOTE: You can continue to modify time entries and we will save to the server later." withCompletion:^{
                    [self.delegate saveTimeEntryDidFinish:self];
                }];
                break;
            }
            case SERVICE_ERRORCODE_UNKNOWN_ERROR: {
                [SharedUICode checkResultsMessageAndDisplayError:resultMessage error:error];
                [self showDatePicker];
                break;
            }
            case SERVICE_ERRORCODE_SUCCESSFUL: {
                [self updateUserClockInClockOut];
                [self.delegate saveTimeEntryDidFinish:self];
                break;
            }
            default: {
//                DEBUG_MSG
#ifndef RELEASE
                NSLog(@"Unhandled errorCode: %ld %@ %@", (long)errorCode, msg, error.localizedDescription);
#endif
                break;
            }
        }
    }];


}

- (void)updateUserClockInClockOut {
    if ((_editClockMode == ACTIVE_CLOCKIN) || (_editClockMode == ACTIVE_CLOCKOUT))
    {
        UserClass *user = [UserClass getInstance];
        if ([_clockInButton.titleLabel.text length] > 0)
            user.lastClockIn = _clockInButton.titleLabel.text;
        if ([_clockOutButton.titleLabel.text length] > 0)
            user.lastClockOut = _clockOutButton.titleLabel.text;

    }
}

#pragma mark - deleting a time entry

-(void) callDeleteTimeEntryWebService{

    //NSString *currentDateTime = self.getCurrentDateTime;
    DataManager* manager = [DataManager sharedManager];
    [manager removeTimeEntryFromServer:timeEntry withCompletion:^(NSInteger errorCode, NSString * _Nullable resultMessage, NSDictionary * _Nullable results, NSError * _Nullable error) {
        [self stopSpinner];

        switch (errorCode) {
            case DATAMANAGER_BUSY: {
                [SharedUICode displayServerIsBusy];
                break;
            }
            case SERVICE_UNAVAILABLE_ERROR: {
                [SharedUICode displayServiceUnavailableErrorWithMsg:@"NOTE: You can continue to delete time entries and we will save to the server later." withCompletion:^{
                    [self updateUserClockInClockOut];
                    [self closeDatePicker];
                    [self.delegate saveTimeEntryDidFinish:self];
                }];
                break;
            }
            case SERVICE_ERRORCODE_UNKNOWN_ERROR: {
                [SharedUICode checkResultsMessageAndDisplayError:resultMessage error:error];
                break;
            }
            case SERVICE_ERRORCODE_SUCCESSFUL: {
                [self updateUserClockInClockOut];
                UserClass *user = [UserClass getInstance];
                NSInteger timeEntryID = [self.timeEntry.timeEntryID integerValue];
                if ((user.activeTimeEntryId && timeEntryID == [user.activeTimeEntryId integerValue]) && timeEntryID > 0)
                {
                    user.activeTimeEntryId = 0;
                    NSUserDefaults* defaults = [NSUserDefaults standardUserDefaults];
                    [defaults setObject:user.activeTimeEntryId forKey:kactiveTimeEntryIDKey];
                    [defaults synchronize];
                }
                [self closeDatePicker];
                [self.delegate saveTimeEntryDidFinish:self];
                break;
            }
            default: {
//                DEBUG_MSG
#ifndef RELEASE
                NSLog(@"Unhandled errorCode: %ld %@", (long)errorCode, msg);
#endif
                break;
            }
        }
    }];

}

-(void) startSpinner{
    if (!self.spinner)
    {
        self.spinner = [[MBProgressHUD alloc] initWithView:self.view];
    }
    self.spinner.labelText = @"Saving";
    [self.view addSubview:self.spinner];
    [self.spinner show:YES];
}

-(void) stopSpinner{
    [self.spinner hide:YES];
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
}



-(void) saveButtonAction
{
    DataManager* manager = [DataManager sharedManager];
    if ([manager isBusy]) {
        [SharedUICode displayServerIsBusy];
        return;
    }
        //    NSDate *clockPickerDate = [pickDate date];
    
//only force non personal accounts to enter a reason for the edit
#ifndef PERSONAL_VERSION
    NSString *strResult = reasonTextField.text;
    strResult = [strResult stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]];
    if (strResult.length == 0) {
            UIAlertView *alert;
            alert = [[UIAlertView alloc] initWithTitle:nil message:@"Please enter a reason for the change" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];

    }
    else {
            [self startSpinner ];
            [self callModifyTimeEntryWebService];
    }
#else
    [self startSpinner ];
    [self callModifyTimeEntryWebService];
#endif
    
    [self removeKeyboard];

}


-(void)dateSelected:(id)sender{
    if (TextFieldMode == 1)
        [_clockInButton setTitle:[formatterDateTime12 stringFromDate:[sender date]] forState:UIControlStateNormal];
    else {
        [_clockOutButton setTitle:[formatterDateTime12 stringFromDate:[sender date]] forState:UIControlStateNormal];
    }
 }


-(void)removeKeyboard{
 //   self.view.center = originalCenter;
    [reasonTextField resignFirstResponder];
}

- (IBAction)doClockInEditingBegin:(id)sender {
 //   self.view.center = CGPointMake(originalCenter.x, originalCenter.y - 100);

}

-(void)closeDatePicker{
    [pickerViewDate removeFromSuperview];
}

-(IBAction)DatePickerDoneClick{
    UIButton *curButton;
    if (TextFieldMode == 1)
        curButton = _clockInButton;
    else
        curButton = _clockOutButton;

    [curButton setTitle:[formatterDateTime12 stringFromDate:theDatePicker.date] forState:UIControlStateNormal];

    
    [self closeDatePicker];
    
}
-(IBAction)keyBoardDoneClick{
    [reasonTextField resignFirstResponder];

}

-(IBAction)DatePickerCancelClick{
    [self closeDatePicker];
}

-(void) showDatePicker{
    [self removeKeyboard];
    
    UserClass *user = [UserClass getInstance];
    if (user.disableTimeEntryEditing)
    {
        UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Your Employer Has Turned Off The Edit Feature. You Can Only Add Notes" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];

    }
    else{
    pickerToolbar = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, self.view.frame.size.width, 64)];
    pickerToolbar.barStyle=UIBarStyleBlackOpaque;
    
    [pickerToolbar sizeToFit];
    
    UIBarButtonItem *cancelBtn = [[UIBarButtonItem alloc] initWithTitle:@"Cancel" style:UIBarButtonItemStyleBordered target:self action:@selector(DatePickerCancelClick)];
    
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    
    
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];
    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];
    
    UIBarButtonItem *titleButton = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];
    if (TextFieldMode == 1)
        titleLabel.text = @"Clock In";
    else
        titleLabel.text = @"Clock Out";
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithTitle:@"Done" style:UIBarButtonItemStylePlain target:self action:@selector(DatePickerDoneClick)];
    
    
    NSArray *itemArray = [[NSArray alloc] initWithObjects:cancelBtn, flexSpace, titleButton, flexSpace, doneDateBarBtn, nil];
    
    [pickerToolbar setItems:itemArray animated:YES];

    UIButton *curButton;
    if (TextFieldMode == 1)
        curButton = _clockInButton;
    else
        curButton = _clockOutButton;
//    if (![curTextField.text isEqualToString:@""])
//        theDatePicker.date = [formatterDateTime12 dateFromString:curTextField.text];
//    else
//        curTextField.text = [formatterDateTime12 stringFromDate:theDatePicker.date];
    BOOL isEmpty = !(curButton.titleLabel.text && curButton.titleLabel.text.length > 0);

    if (!isEmpty)
        theDatePicker.date = [formatterDateTime12 dateFromString:curButton.titleLabel.text];
    else
        [_clockOutButton setTitle:[formatterDateTime12 stringFromDate:theDatePicker.date] forState:UIControlStateNormal];
    
    [pickerViewDate addSubview:pickerToolbar];
    [pickerViewDate addSubview:theDatePicker];
    
    [self.view addSubview:pickerViewDate];
    
/*    NSMutableArray *barItems = [[NSMutableArray alloc] init];
    
    UIBarButtonItem *doneDateBarBtn = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemDone target:self action:@selector(DatePickerDoneClick)];
    
    UIBarButtonItem *flexSpace = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:self action:nil];
    UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(0.0 , 11.0f, 80, 20.0f)];

    [titleLabel setBackgroundColor:[UIColor clearColor]];
    [titleLabel setTextColor:[UIColor whiteColor]];

    UIBarButtonItem *title = [[UIBarButtonItem alloc] initWithCustomView:titleLabel];


    if (TextFieldMode == 1)
        titleLabel.text = @"Clock In";
    else
        titleLabel.text = @"Clock Out";
    
    [barItems addObject:title];
    [barItems addObject:flexSpace];
    [barItems addObject:doneDateBarBtn];
    
    
    [pickerToolbar setItems:barItems animated:YES];
    [pickerViewDate addSubview:pickerToolbar];
    [pickerViewDate addSubview:theDatePicker];
    [pickerViewDate  showInView:self.view];
    [pickerViewDate setBounds:CGRectMake(0,0,320, 464)];
    
    UITextField *curTextField;
    if (TextFieldMode == 1)
        curTextField = _clockInTextField;
    else
        curTextField = _clockOutTextField;
    if (![curTextField.text isEqualToString:@""])
        theDatePicker.date = [formatterDateTime12 dateFromString:curTextField.text];
    else
        curTextField.text = [formatterDateTime12 stringFromDate:theDatePicker.date];
 */
    }
}
 

- (IBAction)clockInTouchDown:(id)sender {
    TextFieldMode = 1;
    [self showDatePicker];

}

- (IBAction)clockOutTouchDown:(id)sender {
    TextFieldMode = 2;
    UserClass *user = [UserClass getInstance];
    //if the clock out is empty and this is an active clock in do not let them clock out using this screen because it will mess up the data
    BOOL isEmpty = !(_clockOutButton.titleLabel.text && _clockOutButton.titleLabel.text.length > 0);
    if ( isEmpty && ([self.timeEntry.timeEntryID intValue] == [user.activeTimeEntryId intValue])) {
        UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"This is part of an active clock in. Please clock out using the clock out button." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];

    } else {
        [self showDatePicker];
    }
}
- (IBAction)doDeleteTimeEntry:(id)sender {
    UserClass *user = [UserClass getInstance];
    if (user.disableTimeEntryEditing)
    {
        UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"Your Employer Has Turned Off The Edit Feature. You Can Only Add Notes" delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
        [alert show];
        
    }
    else
    {

        //if this is an active clock in do not let them delete it because it will mess up the data
        if ([self.timeEntry.timeEntryID intValue] == [user.activeTimeEntryId intValue]) {
            UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"This is part of an active clock in. Please clock out using the clock out button then delete it." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
        
        }
        else {
        
            [self confirmDelete];
        }
    }
}

-(void)confirmDelete{
    DataManager* manager = [DataManager sharedManager];
    if ([manager isBusy]) {
        [SharedUICode displayServerIsBusy];
        return;
    }
    [SharedUICode yesNo:@"Confirm Delete" message:@"Tapping DELETE will remove this record from the system permanently." yesBtnTitle:@"DELETE" noBtnTitle:@"Cancel" withCompletion:^(YesNoCancelResult Result) {
        switch (Result) {
            case resultYes:
                [self doConfirmedDeleteTimeEntry];
                break;
                
            default:
                break;
        }
    }];
}

-(void)doConfirmedDeleteTimeEntry{
    [self startSpinner ];
    [self callDeleteTimeEntryWebService];
}

//#define MINIMUM_ZOOM 0.014
//#define ANNOTATION_REGION_PAD_FACTOR 3.15
//#define MAX_DEGREES 360

#pragma mark AlertView Actions
- (void)alertView:(UIAlertView *)alertView clickedButtonAtIndex:(NSInteger)buttonIndex{

}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
    
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
        
    return 60.0;
}



- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    
    return 2;
    
    
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    }
    if (indexPath.row == 0)
    {
        cell.textLabel.text = @"View Map";
        cell.imageView.image = [UIImage imageNamed:@"map-marker.png"];
    }
    else
    {
        cell.textLabel.text = @"View History";
        cell.imageView.image = [UIImage imageNamed:@"notepad.png"];
    }
    return cell;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
     CLLocationCoordinate2D cord =  timeEntry.clockIn.location;
    //if View map was selected
    if (indexPath.row == 0)
    {
        //if the employee disabled the GPS tracking
        if ([self.clockInGpsDataStatus isEqualToString:@"DISABLED"])
        {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"Unable to view Map. Employee has turned off Location Services on their device. They will need to turn it on for this feature to work" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
            
        }
        //if we don't have any GPS recording like for an add time entry vs a clock in
        else if ((self.clockInLocation.latitude == 0) && (self.clockOutLocation.latitude == 0))
        {
            UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil message:@"No GPS information available for this time entry" delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];
           
        }

        else

            [self showMapView];
    }
    else
        [self showHistoryView];
}


-(void) showHistoryView{
    UIStoryboard *storyboard;
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        storyboard = [UIStoryboard storyboardWithName:@"iPhone" bundle:nil];
    } else if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        storyboard = [UIStoryboard storyboardWithName:@"iPad" bundle:nil];
    }
    
    TimeEntryHistoryViewController *historyViewController = [storyboard instantiateViewControllerWithIdentifier:@"TimeEntryHistory"];
    
    historyViewController.timeEntryID = [self.timeEntry.timeEntryID stringValue];
    historyViewController.clockInDateTime = self.clockInDateTime;
    historyViewController.clockOutDateTime = self.clockOutDateTime;
    historyViewController.employeeName = employeeName;
    
    historyViewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    
    [self.navigationController pushViewController:historyViewController animated:YES];
}

-(void) showMapView{
    UIStoryboard *storyboard;
    if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone) {
        storyboard = [UIStoryboard storyboardWithName:@"iPhone" bundle:nil];
    } else if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad) {
        storyboard = [UIStoryboard storyboardWithName:@"iPad" bundle:nil];
    }
    
    MapViewController *mapViewController = [storyboard instantiateViewControllerWithIdentifier:@"MapView"];
    
    mapViewController.clockInLocation = self.clockInLocation;
    mapViewController.clockOutLocation = self.clockOutLocation;
    
    mapViewController.employeeName = self.employeeName;
    
    
    mapViewController.modalTransitionStyle = UIModalTransitionStyleCoverVertical;
    
    [self.navigationController pushViewController:mapViewController animated:YES];
    
}

- (BOOL)disablesAutomaticKeyboardDismissal {
    return NO;
}
//- (BOOL)textViewShouldEndEditing:(UITextView *)textView {
//    [textView resignFirstResponder];
//    return YES;
//}

- (IBAction)doClockInBtnClick:(id)sender {
    TextFieldMode = 1;
    [self showDatePicker];

}
- (IBAction)doClockOutBtnClick:(id)sender {
    TextFieldMode = 2;
    UserClass *user = [UserClass getInstance];
    //if the clock out is empty and this is an active clockin do not let them clock out using this screen because it will mess up the data
    BOOL isEmpty = [NSString isNilOrEmpty:self.clockOutDateTime];
    BOOL isActiveClockIn = false;
    //if we are an employee then user.activeTimeEntryId would be set else if we are an employer we'll need call the api to figure it out
    if (isEmpty)
    {
        if ([user.userType isEqualToString:@"employer"])
        {
            [self startSpinner];
            _spinner.labelText = @"Connecting to Server..";
            CheckClockStatusWebService *checkClockWebService = [[CheckClockStatusWebService alloc] init];
            checkClockWebService.delegate = self;
            [checkClockWebService checkClockStatus: _employeeId];

        }
        else
        {
            isActiveClockIn = ([self.timeEntry.timeEntryID integerValue] == [user.activeTimeEntryId integerValue]);
            if (isActiveClockIn) {
                UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"This is part of an active clock in. Please clock out first using the clock out button then modify." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
                [alert show];
        
            }
            else
                [self showDatePicker];
        }
    }
    else
        [self showDatePicker];

}
//this is the callback that comes from the clock status web service. The error code will tell us what to do
- (void)checkClockStatusServiceCallDidFinish:(CheckClockStatusWebService *)controller timeEntryRec:(NSDictionary *)timeEntryRec ErrorCode:(int)errorValue {
    
    [self stopSpinner];
    [UIApplication sharedApplication].networkActivityIndicatorVisible = NO;
    
    //if no error and we got a clock in back that means this time entry is an Active Clock in
    if (errorValue == 0)
    {
        NSString* clockTime = @"";
        if (nil != timeEntryRec) {
            clockTime = [NSString trim:[timeEntryRec valueForKey:@"clockInIso8601"]];
        }
        if ([clockTime length] > 0)
        {
            UIAlertView* alert = [[UIAlertView alloc] initWithTitle:@"Error" message:@"This is part of an active clock in. Please clock out using the clock out button." delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
            [alert show];

        }
        else
            [self showDatePicker];
        
    }
    //if we failed to get the info then show them the date picker
    else
        [self showDatePicker];

}

@end
